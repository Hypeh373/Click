import threading
import time
import os
import psutil
import telebot
from telebot import types
import sqlite3
import subprocess
import os
import signal
import time
import traceback
import json
from html import escape
import psutil
import sys
import threading
import logging
from datetime import datetime
from aiocryptopay import AioCryptoPay, Networks
import asyncio
import re
try:
    from flyerapi import Flyer, APIError as FlyerAPIError
    FLYER_IMPORTED_FOR_CHECKER = True
except ImportError:
    FLYER_IMPORTED_FOR_CHECKER = False

# =================================================================================
# --------------------------- –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ----------------------------------
# =================================================================================
CREATOR_BOT_TOKEN = '7971559766:AAFC5p5xfVLKzya8krlL4mHra9PJ7TMQPhQ' # üëà –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
CRYPTO_PAY_TOKEN = '467156:AA0Mvgp0h5oKZaETFQZqdnCWUZSoPVpAT0W' # üëà –ü–æ–ª—É—á–∏ –µ–≥–æ –≤ @CryptoBot -> Crypto Pay -> –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

ADMIN_ID = 5851731333 # üëà –¢–í–û–ô ID –ê–î–ú–ò–ù–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä):
# –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ–±—ã –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
ADMIN_IDS = [
    ADMIN_ID,
    5851731333
]
MAX_BOTS_PER_USER = 5
REF_BOT_SCRIPT_NAME = 'ref_bot.py'
STARS_BOT_SCRIPT_NAME = 'stars_bot.py'
CLICKER_BOT_SCRIPT_NAME = 'clicker_bot.py'
CLICKER_UNLOCK_CODE = '62927'
DB_NAME = 'creator_data2.db'
MIN_CREATOR_WITHDRAWAL = 50.0
TTL_STATES_SECONDS = 1800
# =================================================================================

# =================================================================================
# --------------------------- –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö "–û –ë–û–¢–ï" ---------------------------
# =================================================================================
PROJECT_START_DATE = "10.06.2025"
ADMIN_CHAT_LINK = "https://t.me/MinxoAdminChat"
CHANNEL_LINK = "https://t.me/MinxoNews"
# =================================================================================

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

if not os.path.exists('logs'): os.makedirs('logs')
if not os.path.exists('dbs'): os.makedirs('dbs')

db_lock = threading.Lock()
conn = sqlite3.connect(DB_NAME, check_same_thread=False)
conn.row_factory = sqlite3.Row
bot = telebot.TeleBot(CREATOR_BOT_TOKEN)
user_states = {}
bots_broadcast_running = False

async_loop = asyncio.new_event_loop()

def run_async_loop(loop):
    asyncio.set_event_loop(loop)
    loop.run_forever()

loop_thread = threading.Thread(target=run_async_loop, args=(async_loop,), daemon=True)

def run_async_task(coro):
    future = asyncio.run_coroutine_threadsafe(coro, async_loop)
    return future.result()

def is_admin(user_id: int) -> bool:
    try:
        return int(user_id) in set(int(x) for x in ADMIN_IDS)
    except Exception:
        return user_id == ADMIN_ID

if "YOUR_CRYPTO_PAY_API_TOKEN" not in CRYPTO_PAY_TOKEN:
    crypto_pay = AioCryptoPay(token=CRYPTO_PAY_TOKEN, network=Networks.MAIN_NET)
else:
    crypto_pay = None
    logging.warning("–í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è Crypto Pay. –û–ø–ª–∞—Ç–∞ VIP –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# --- Helpers for Crypto Pay safe usage ---
def is_crypto_token_configured() -> bool:
    """Return True if Crypto Pay token seems configured (non-empty and not placeholder)."""
    token = None
    try:
        # Prefer dynamic setting when available
        token = get_setting('crypto_pay_token')
    except Exception:
        token = None
    if not token:
        token = CRYPTO_PAY_TOKEN
    if not token:
        return False
    token_str = str(token).strip()
    if not token_str or token_str in ('‚Äî', 'YOUR_CRYPTO_PAY_API_TOKEN'):
        return False
    return True

def get_crypto_client():
    """Lazily initialize and return Crypto Pay client based on the current token.
    Returns None if token is not configured or initialization failed.
    """
    global crypto_pay, CRYPTO_PAY_TOKEN
    if not is_crypto_token_configured():
        return None
    # Ensure CRYPTO_PAY_TOKEN reflects the latest saved setting
    try:
        saved = get_setting('crypto_pay_token')
        if saved:
            CRYPTO_PAY_TOKEN = saved
    except Exception:
        pass
    if crypto_pay is None:
        try:
            crypto_pay = AioCryptoPay(token=CRYPTO_PAY_TOKEN, network=Networks.MAIN_NET)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Crypto Pay (lazy): {e}")
            crypto_pay = None
            return None
    return crypto_pay

# =================================================================================
# --------------------------- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• -------------------------------
# =================================================================================

def init_db():
    with db_lock:
        cursor = conn.cursor()
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY, username TEXT, balance REAL DEFAULT 0.0,
            frozen_balance REAL DEFAULT 0.0,
            clicker_unlocked BOOLEAN DEFAULT FALSE
        )''')
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS admin_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            resource_link TEXT NOT NULL,
            reward REAL DEFAULT 0.1,
            is_active BOOLEAN DEFAULT TRUE
        )''')

        cursor.execute('''CREATE TABLE IF NOT EXISTS user_completed_admin_tasks (
            user_id INTEGER NOT NULL,
            task_id INTEGER NOT NULL,
            PRIMARY KEY (user_id, task_id)
        )''')

        user_columns = [desc[1] for desc in cursor.execute("PRAGMA table_info(users)").fetchall()]
        if 'frozen_balance' not in user_columns:
            cursor.execute("ALTER TABLE users ADD COLUMN frozen_balance REAL DEFAULT 0.0")
            logging.info("–ö–æ–ª–æ–Ω–∫–∞ 'frozen_balance' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É 'users'.")
        if 'clicker_unlocked' not in user_columns:
            cursor.execute("ALTER TABLE users ADD COLUMN clicker_unlocked BOOLEAN DEFAULT FALSE")
            logging.info("–ö–æ–ª–æ–Ω–∫–∞ 'clicker_unlocked' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É 'users'.")

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS bots (
            id INTEGER PRIMARY KEY AUTOINCREMENT, owner_id INTEGER NOT NULL, bot_username TEXT, bot_token TEXT,
            status TEXT DEFAULT 'unconfigured', pid INTEGER, start_time INTEGER,
            bot_type TEXT DEFAULT 'ref',
            admins TEXT DEFAULT '[]', welcome_message TEXT DEFAULT 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
            
            ref_reward_1 REAL DEFAULT 1.0, ref_reward_2 REAL DEFAULT 0.1, withdrawal_limit REAL DEFAULT 100.0,
            withdrawal_method_text TEXT DEFAULT 'Payeer-–∫–æ—à–µ–ª–µ–∫', payout_channel TEXT,
            chat_link TEXT, regulations_text TEXT, vip_status BOOLEAN DEFAULT FALSE,
            flyer_op_enabled BOOLEAN DEFAULT FALSE, flyer_api_key TEXT, flyer_limit INTEGER DEFAULT 5 NOT NULL,

            stars_payments_channel TEXT, stars_support_chat TEXT, stars_flyer_api_key TEXT,
            stars_op_enabled BOOLEAN DEFAULT FALSE, 
            stars_welcome_bonus REAL DEFAULT 2.0,
            stars_daily_bonus REAL DEFAULT 1.0, 
            stars_daily_cooldown INTEGER DEFAULT 24,
            stars_ref_bonus_referrer REAL DEFAULT 15.0, 
            stars_ref_bonus_new_user REAL DEFAULT 10.0
        )''')
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS creator_withdrawals (
            id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, amount REAL,
            details TEXT, status TEXT DEFAULT 'pending', created_at DATETIME
        )''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY, value TEXT
        )''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS crypto_payments (
            invoice_id INTEGER PRIMARY KEY,
            bot_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            status TEXT DEFAULT 'pending' 
        )''')
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS pending_flyer_rewards (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            owner_id INTEGER NOT NULL,
            bot_id INTEGER NOT NULL,
            task_signature TEXT NOT NULL UNIQUE,
            amount REAL NOT NULL,
            check_after_timestamp DATETIME NOT NULL
        )''')
        
        try:
            flyer_rewards_columns = [desc[1] for desc in cursor.execute("PRAGMA table_info(pending_flyer_rewards)").fetchall()]
            if 'task_signature' not in flyer_rewards_columns:
                cursor.execute("DROP TABLE pending_flyer_rewards")
                cursor.execute('''CREATE TABLE pending_flyer_rewards (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    owner_id INTEGER NOT NULL,
                    bot_id INTEGER NOT NULL,
                    task_signature TEXT NOT NULL UNIQUE,
                    amount REAL NOT NULL,
                    check_after_timestamp DATETIME NOT NULL
                )''')
                logging.info("–¢–∞–±–ª–∏—Ü–∞ 'pending_flyer_rewards' –±—ã–ª–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.")
        except sqlite3.OperationalError:
             pass

        bot_columns = [desc[1] for desc in cursor.execute("PRAGMA table_info(bots)").fetchall()]
        new_columns = {
            'vip_status': "BOOLEAN DEFAULT FALSE",
            'stars_welcome_bonus': "REAL DEFAULT 2.0",
            'stars_daily_bonus': "REAL DEFAULT 1.0",
            'stars_daily_cooldown': "INTEGER DEFAULT 24",
            'stars_ref_bonus_referrer': "REAL DEFAULT 15.0",
            'stars_ref_bonus_new_user': "REAL DEFAULT 10.0",
            # Clicker-specific settings
            'click_reward_min': "REAL DEFAULT 0.001",
            'click_reward_max': "REAL DEFAULT 0.005",
            'energy_max': "INTEGER DEFAULT 1000",
            'energy_regen_rate': "INTEGER DEFAULT 2",
            'welcome_bonus_clicker': "REAL DEFAULT 1.0",
            'daily_bonus_clicker': "REAL DEFAULT 0.5",
            'daily_bonus_cooldown_clicker': "INTEGER DEFAULT 12",
            'ref_bonus_referrer_clicker': "REAL DEFAULT 0.2",
            'ref_bonus_new_user_clicker': "REAL DEFAULT 0.1",
            'withdrawal_min_clicker': "REAL DEFAULT 10.0",
            'withdrawal_method_text_clicker': "TEXT DEFAULT 'Payeer-–∫–æ—à–µ–ª–µ–∫'",
            'payments_channel_clicker': "TEXT",
            'support_chat_clicker': "TEXT",
            'clicker_flyer_api_key': "TEXT",
            'clicker_op_enabled': "BOOLEAN DEFAULT FALSE",
        }
        
        for col, col_type in new_columns.items():
            if col not in bot_columns:
                try:
                    cursor.execute(f"ALTER TABLE bots ADD COLUMN {col} {col_type}")
                    logging.info(f"–ö–æ–ª–æ–Ω–∫–∞ '{col}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É 'bots'.")
                except sqlite3.OperationalError as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É {col}: {e}")

        cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('op_reward', '1.0')")
        cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('stars_sub_reward', '1.0')")
        cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('vip_price', '120.0')")
        # Watermark toggle for creator welcome message (enabled by default)
        cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('creator_watermark_enabled', '1')")
        # Global toggle for 'üìã –°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤' feature (enabled by default)
        cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('bots_list_feature_enabled', '1')")
        # –£–¥–∞–ª–µ–Ω–æ: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—ã 'creator_price' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
        cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('bots_list_min_users', '30')")
        cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('bots_list_pinned', '[]')")
        cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('bots_list_manual', '[]')")
        cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES ('bots_list_hidden', '[]')")
        conn.commit()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

def db_execute(query, params=(), commit=False, fetchone=False, fetchall=False):
    with db_lock:
        cursor = conn.cursor()
        cursor.execute(query, params)
        if commit:
            conn.commit()
            return cursor.lastrowid
        if fetchone:
            return cursor.fetchone()
        if fetchall:
            return cursor.fetchall()
        return cursor

def get_child_bot_user_count(bot_id, bot_type):
    db_filename_map = {
        'ref': f"dbs/bot_{bot_id}_data.db",
        'stars': f"dbs/bot_{bot_id}_stars_data.db",
        'clicker': f"dbs/bot_{bot_id}_clicker_data.db",
    }
    db_filename = db_filename_map.get(bot_type, f"dbs/bot_{bot_id}_data.db")
    try:
        if not os.path.exists(db_filename):
            return 0
        child_conn = sqlite3.connect(f'file:{db_filename}?mode=ro', uri=True)
        count = child_conn.cursor().execute("SELECT COUNT(*) FROM users").fetchone()[0]
        child_conn.close()
        return count
    except Exception:
        return 0

def update_bot_setting(bot_id, setting_name, new_value):
    allowed_settings = [
        'bot_token', 'bot_username', 'ref_reward_1', 'ref_reward_2', 'withdrawal_limit', 'status',
        'withdrawal_method_text', 'payout_channel', 'chat_link', 'regulations_text', 'vip_status', 
        'admins', 'owner_id', 'welcome_message', 'flyer_op_enabled', 'flyer_api_key', 'flyer_limit',
        'stars_payments_channel', 'stars_support_chat', 'stars_flyer_api_key', 'stars_welcome_bonus', 'stars_op_enabled',
        'stars_daily_bonus', 'stars_daily_cooldown', 'stars_ref_bonus_referrer', 'stars_ref_bonus_new_user',
        # Clicker-specific settings
        'click_reward_min', 'click_reward_max', 'energy_max', 'energy_regen_rate', 'welcome_bonus_clicker',
        'daily_bonus_clicker', 'daily_bonus_cooldown_clicker', 'ref_bonus_referrer_clicker', 'ref_bonus_new_user_clicker',
        'withdrawal_min_clicker', 'withdrawal_method_text_clicker', 'payments_channel_clicker', 'support_chat_clicker',
        'clicker_flyer_api_key', 'clicker_op_enabled'
    ]
    if setting_name in allowed_settings:
        db_execute(f"UPDATE bots SET {setting_name} = ? WHERE id = ?", (new_value, bot_id), commit=True)

def build_public_bots_list(min_users: int):
    """–°—Ç—Ä–æ–∏—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ 'üìã –°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤' —Å —É—á–µ—Ç–æ–º –∑–∞–∫—Ä–µ–ø–æ–≤/—Ä—É—á–Ω–æ–≥–æ/—Å–∫—Ä—ã—Ç—ã—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: (bot_id, username_or_None, bot_type, users_count, link)
    –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ) –±–æ—Ç—ã.
    """
    try:
        pinned = json.loads(get_setting('bots_list_pinned') or '[]')
        manual = json.loads(get_setting('bots_list_manual') or '[]')
        hidden = set(json.loads(get_setting('bots_list_hidden') or '[]'))
    except Exception:
        pinned, manual, hidden = [], [], set()

    bots = db_execute("SELECT id, bot_username, bot_type, status FROM bots ORDER BY id DESC", fetchall=True) or []
    listed: List[tuple] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä–æ–≥–∞, –µ—Å–ª–∏ –Ω–µ —Å–∫—Ä—ã—Ç—ã
    for bid in pinned:
        b = next((x for x in bots if x['id'] == bid), None)
        if not b or bid in hidden:
            continue
        if b['status'] != 'running':
            continue
        cnt = get_child_bot_user_count(b['id'], b['bot_type'])
        link = f"https://t.me/{b['bot_username']}" if b['bot_username'] else "‚Äî"
        listed.append((b['id'], b['bot_username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏', b['bot_type'], cnt, link))

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –ø–æ—Ä–æ–≥—É, –∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã—Ö –∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
    added_ids = {x[0] for x in listed}
    for b in bots:
        if b['id'] in added_ids or b['id'] in hidden:
            continue
        if b['status'] != 'running':
            continue
        cnt = get_child_bot_user_count(b['id'], b['bot_type'])
        if cnt >= min_users:
            link = f"https://t.me/{b['bot_username']}" if b['bot_username'] else "‚Äî"
            listed.append((b['id'], b['bot_username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏', b['bot_type'], cnt, link))

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ —Å–∫—Ä—ã—Ç—ã –∏ –µ—â–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ
    for bid in manual:
        if bid in hidden or bid in added_ids:
            continue
        b = next((x for x in bots if x['id'] == bid), None)
        if not b:
            continue
        if b['status'] != 'running':
            continue
        cnt = get_child_bot_user_count(b['id'], b['bot_type'])
        link = f"https://t.me/{b['bot_username']}" if b['bot_username'] else "‚Äî"
        listed.append((b['id'], b['bot_username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏', b['bot_type'], cnt, link))

    return listed

def get_setting(key):
    result = db_execute("SELECT value FROM settings WHERE key = ?", (key,), fetchone=True)
    return result[0] if result else None

def set_setting(key, value):
    db_execute("REPLACE INTO settings (key, value) VALUES (?, ?)", (key, value), commit=True)

def get_user(user_id, username=None):
    user = db_execute("SELECT * FROM users WHERE user_id = ?", (user_id,), fetchone=True)
    if user is None: 
        db_execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username), commit=True)
        user = db_execute("SELECT * FROM users WHERE user_id = ?", (user_id,), fetchone=True)
    return user

def get_user_bots_count(user_id):
    return db_execute("SELECT COUNT(*) FROM bots WHERE owner_id = ?", (user_id,), fetchone=True)[0]

def get_user_bots(user_id):
    return db_execute("SELECT * FROM bots WHERE owner_id = ? ORDER BY id DESC", (user_id,), fetchall=True)

def get_bot_by_id(bot_id):
    return db_execute("SELECT * FROM bots WHERE id = ?", (bot_id,), fetchone=True)

def create_bot_in_db(owner_id, bot_type):
    return db_execute("INSERT INTO bots (owner_id, admins, bot_type) VALUES (?, ?, ?)", 
                      (owner_id, json.dumps([owner_id]), bot_type), commit=True)

def update_bot_process_info(bot_id, status, pid, start_time=None):
    db_execute("UPDATE bots SET status = ?, pid = ?, start_time = ? WHERE id = ?", (status, pid, start_time, bot_id), commit=True)

def delete_bot_from_db(bot_id):
    bot_info = get_bot_by_id(bot_id)
    if not bot_info: return
    stop_bot_process(bot_id)
    try: os.remove(f"logs/bot_{bot_id}.log")
    except FileNotFoundError: pass
    db_filename_map = {
        'ref': f"dbs/bot_{bot_id}_data.db",
        'stars': f"dbs/bot_{bot_id}_stars_data.db",
        'clicker': f"dbs/bot_{bot_id}_clicker_data.db",
    }
    db_filename = db_filename_map.get(bot_info['bot_type'])
    try:
        if db_filename:
            os.remove(db_filename)
    except FileNotFoundError: pass
    db_execute("DELETE FROM bots WHERE id = ?", (bot_id,), commit=True)

def start_bot_process(bot_id):
    bot_info = get_bot_by_id(bot_id)
    if not bot_info or not bot_info['bot_token']: return False, "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω!"
    if bot_info['status'] == 'running': return False, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
    try:
        env = os.environ.copy()
        script_name = ""
        
        if bot_info['bot_type'] == 'ref':
            script_name = REF_BOT_SCRIPT_NAME
            if bot_info['flyer_api_key']:
                env['FLYER_API_KEY'] = bot_info['flyer_api_key']
        elif bot_info['bot_type'] == 'stars':
            script_name = STARS_BOT_SCRIPT_NAME
            if bot_info['stars_flyer_api_key']:
                 env['FLYER_API_KEY'] = bot_info['stars_flyer_api_key']
        elif bot_info['bot_type'] == 'clicker':
            script_name = CLICKER_BOT_SCRIPT_NAME
            if bot_info['clicker_flyer_api_key']:
                 env['FLYER_API_KEY'] = bot_info['clicker_flyer_api_key']
        else:
            return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–æ—Ç–∞."
        
        if not bot_info['vip_status']:
            env['CREATOR_BRANDING'] = 'true'
            
        log_file = open(f"logs/bot_{bot_id}.log", "a", encoding='utf-8')
        process = subprocess.Popen(
            [sys.executable, script_name, str(bot_id)],
            stdout=log_file, stderr=log_file, env=env
        )
        log_file.close()
        update_bot_process_info(bot_id, 'running', process.pid, int(time.time()))
        return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω."
    except Exception as e: return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}"

def stop_bot_process(bot_id):
    bot_info = get_bot_by_id(bot_id)
    if not bot_info or not bot_info['pid']:
        update_bot_process_info(bot_id, 'stopped', None, None)
        return False, "–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    if bot_info['status'] != 'running': return False, "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    try:
        p = psutil.Process(bot_info['pid'])
        p.kill()
        update_bot_process_info(bot_id, 'stopped', None, None)
        return True, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    except psutil.NoSuchProcess:
        update_bot_process_info(bot_id, 'stopped', None, None)
        return False, "–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω."
    except Exception as e:
        update_bot_process_info(bot_id, 'stopped', None, None)
        return False, f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}"

def get_process_resources(pid):
    try:
        process = psutil.Process(pid)
        ram_usage = process.memory_info().rss / (1024 * 1024)
        cpu_usage = process.cpu_percent(interval=0.1)
        return {"ram": ram_usage, "cpu": cpu_usage}
    except psutil.NoSuchProcess:
        return {"ram": 0, "cpu": 0}

def format_uptime(seconds):
    if not seconds: return "–Ω–µ –∑–∞–ø—É—â–µ–Ω"
    days, rem = divmod(seconds, 86400); hours, rem = divmod(rem, 3600); minutes, seconds = divmod(rem, 60)
    parts = []
    if days: parts.append(f"{int(days)} –¥.")
    if hours: parts.append(f"{int(hours)} —á.")
    if minutes: parts.append(f"{int(minutes)} –º–∏–Ω.")
    if seconds: parts.append(f"{int(seconds)} —Å–µ–∫.")
    return " ".join(parts) if parts else "0 —Å–µ–∫."

def create_main_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞"), types.KeyboardButton("ü§ñ –ú–æ–∏ –±–æ—Ç—ã"))
    try:
        bl_enabled_raw = get_setting('bots_list_feature_enabled')
        bl_enabled = str(bl_enabled_raw).strip() in ('1', 'true', 'True') if bl_enabled_raw is not None else True
    except Exception:
        bl_enabled = True
    if bl_enabled:
        markup.add(types.KeyboardButton("üìã –°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤"))
    markup.add(types.KeyboardButton("üí∞ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"), types.KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"))
    if is_admin(user_id):
        markup.add(types.KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return markup
    
def create_admin_menu():
    markup = types.InlineKeyboardMarkup(row_width=2)
    try:
        bl_enabled_raw = get_setting('bots_list_feature_enabled')
        bl_enabled = str(bl_enabled_raw).strip() in ('1', 'true', 'True') if bl_enabled_raw is not None else True
    except Exception:
        bl_enabled = True
    if bl_enabled:
        markup.add(types.InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast_start"),
                   types.InlineKeyboardButton("üìÇ –°–ø–∏—Å–∫–∏", callback_data="admin_lists_menu"))
    else:
        markup.add(types.InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast_start"))

    # New: Bot broadcast entrypoint
    markup.add(types.InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –±–æ—Ç–∞—Ö", callback_data="admin_broadcast_bots_menu"))
    markup.add(types.InlineKeyboardButton("üì¨ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_wd_list"),
               types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Ö–æ–¥–∞", callback_data="admin_op_manage"))
    markup.add(types.InlineKeyboardButton("ü§ñ –í—Å–µ –±–æ—Ç—ã", callback_data="admin_bots_all"),
               types.InlineKeyboardButton("‚ÇΩ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VIP", callback_data="admin_vip_manage"))
    markup.add(types.InlineKeyboardButton("üí∏ –í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_balance_add_start"),
               types.InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–≤–æ–¥ —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è", callback_data="admin_hold_transfer_start"))
    markup.add(types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É", callback_data="admin_restart_filter_start"))
    # New: Mass start by filter
    markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É", callback_data="admin_start_filter_start"))
    markup.add(types.InlineKeyboardButton("üìÑ –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞", callback_data="admin_get_logs_start"),
               types.InlineKeyboardButton("‚ú® –ú–æ–∏ –û–ü", callback_data="admin_my_op_menu"))
    # Quick settings
    markup.add(
        types.InlineKeyboardButton("üß© Crypto Pay", callback_data="admin_crypto_pay_manage"),
        types.InlineKeyboardButton("üí¨ –ß–∞—Ç –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_set_chat_link")
    )
    markup.add(
        types.InlineKeyboardButton("üì¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="admin_set_channel_link")
    )
    # Top-level button to edit creator welcome text
    markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–µ–∞—Ç–æ—Ä–∞", callback_data="admin_edit_creator_welcome"))
    return markup
    
def create_bot_type_menu(user_id=None):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π", callback_data="create_bot_ref"))
    markup.add(types.InlineKeyboardButton("‚≠ê –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –ó–≤—ë–∑–¥", callback_data="create_bot_stars"))
    if user_id is not None:
        try:
            user = get_user(user_id)
            unlocked = bool(user['clicker_unlocked']) if user and 'clicker_unlocked' in user.keys() else False
        except Exception:
            unlocked = False
        if unlocked:
            markup.add(types.InlineKeyboardButton("üñ± –ö–ª–∏–∫–µ—Ä", callback_data="create_bot_clicker"))
    return markup

def create_my_bots_menu(user_id):
    user_bots = get_user_bots(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    if not user_bots:
        markup.add(types.InlineKeyboardButton("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤...", callback_data="dummy"))
    else:
        for bot_item in user_bots:
            icons = {'unconfigured': '‚ö†Ô∏è', 'stopped': 'üî¥', 'running': 'üü¢'}
            status_icon = icons.get(bot_item['status'], '‚ùì')
            bot_type_icon = "üí∏" if bot_item['bot_type'] == 'ref' else "‚≠ê" if bot_item['bot_type'] == 'stars' else "üñ±" if bot_item['bot_type'] == 'clicker' else "üé®"
            vip_icon = "‚≠ê" if bot_item['vip_status'] else ""
            name = f"@{bot_item['bot_username']}" if bot_item['bot_username'] else f"–ë–æ—Ç #{bot_item['id']} (–±–µ–∑ –∏–º–µ–Ω–∏)"
            markup.add(types.InlineKeyboardButton(f"{status_icon} {bot_type_icon} {name} {vip_icon}", callback_data=f"actions_{bot_item['id']}"))
    return markup

def create_bot_actions_menu(bot_id):
    bot_info = get_bot_by_id(bot_id)
    if not bot_info: return None
    markup = types.InlineKeyboardMarkup(row_width=2)
    if bot_info['status'] == 'running': status_text = "üü¢ –ó–∞–ø—É—â–µ–Ω"
    elif bot_info['status'] == 'stopped': status_text = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else: status_text = "‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    markup.add(types.InlineKeyboardButton(status_text, callback_data="dummy"))
    
    if bot_info['bot_type'] in ['ref', 'stars', 'clicker']:
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callback_data=f"config_{bot_id}"),
                   types.InlineKeyboardButton("üí∞ –î–æ–ø. –∑–∞—Ä–∞–±–æ—Ç–æ–∫ (Flyer)", callback_data=f"dop_zarabotok_{bot_id}"))
    else:
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callback_data=f"config_{bot_id}"))

    markup.add(types.InlineKeyboardButton("üì≤ –ü–µ—Ä–µ–¥–∞—Ç—å –±–æ—Ç–∞", callback_data=f"transfer_{bot_id}_start"),
               types.InlineKeyboardButton("üìÑ –õ–æ–≥–∏", callback_data=f"logs_{bot_id}_get"))
    markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞", callback_data=f"delete_{bot_id}_confirm"),
               types.InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data=f"users_{bot_id}_export"))
    
    vip_status_text = "‚≠ê VIP-—Å—Ç–∞—Ç—É—Å (–í–∫–ª)" if bot_info['vip_status'] else "‚≠ê VIP-—Å—Ç–∞—Ç—É—Å (–í—ã–∫–ª)"
    markup.add(types.InlineKeyboardButton(vip_status_text, callback_data=f"vip_{bot_id}_toggle"))
    
    # –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–∏–ø–æ–º 'creator'
    
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤", callback_data="back_to_bots_list"))
    return markup

def create_ref_bot_config_menu(bot_id):
    bot_info = get_bot_by_id(bot_id)
    if not bot_info: return None
    markup = types.InlineKeyboardMarkup(row_width=2)
    if bot_info['status'] == 'running':
        markup.add(types.InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"control_{bot_id}_stop"),
                   types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"control_{bot_id}_restart"))
    else:
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"control_{bot_id}_start"))
    markup.add(types.InlineKeyboardButton("üîë –¢–æ–∫–µ–Ω", callback_data=f"edit_{bot_id}_bot_token"),
               types.InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data=f"edit_{bot_id}_welcome_message"))
    markup.add(types.InlineKeyboardButton(f"L1: {bot_info['ref_reward_1']}‚ÇΩ", callback_data=f"edit_{bot_id}_ref_reward_1"),
               types.InlineKeyboardButton(f"L2: {bot_info['ref_reward_2']}‚ÇΩ", callback_data=f"edit_{bot_id}_ref_reward_2"))
    markup.add(types.InlineKeyboardButton(f"–ú–∏–Ω. –≤—ã–≤–æ–¥: {bot_info['withdrawal_limit']}‚ÇΩ", callback_data=f"edit_{bot_id}_withdrawal_limit"),
               types.InlineKeyboardButton("üèß –°–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞", callback_data=f"edit_{bot_id}_withdrawal_method_text"))
    markup.add(types.InlineKeyboardButton(f"üìà –õ–∏–º–∏—Ç –û–ü ({bot_info['flyer_limit']})", callback_data=f"edit_{bot_id}_flyer_limit"))
    markup.add(types.InlineKeyboardButton("üîó –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data=f"edit_{bot_id}_chat_link"),
               types.InlineKeyboardButton("üìú –†–µ–≥–ª–∞–º–µ–Ω—Ç", callback_data=f"edit_{bot_id}_regulations_text"))
    markup.add(types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç", callback_data=f"edit_{bot_id}_payout_channel"),
               types.InlineKeyboardButton("üë• –ê–¥–º–∏–Ω—ã", callback_data=f"admins_{bot_id}_manage"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞", callback_data=f"actions_{bot_id}"))
    return markup

def create_stars_bot_config_menu(bot_id):
    bot_info = get_bot_by_id(bot_id)
    if not bot_info: return None
    markup = types.InlineKeyboardMarkup(row_width=2)
    if bot_info['status'] == 'running':
        markup.add(types.InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"control_{bot_id}_stop"),
                   types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"control_{bot_id}_restart"))
    else:
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"control_{bot_id}_start"))
    markup.add(types.InlineKeyboardButton("üîë –¢–æ–∫–µ–Ω", callback_data=f"edit_{bot_id}_bot_token"),
               types.InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data=f"edit_{bot_id}_welcome_message"))
    markup.add(types.InlineKeyboardButton(f"üéÅ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫: {bot_info['stars_daily_bonus']}‚≠ê", callback_data=f"edit_{bot_id}_stars_daily_bonus"),
               types.InlineKeyboardButton(f"‚è±Ô∏è –ö–î –ø–æ–¥–∞—Ä–∫–∞: {bot_info['stars_daily_cooldown']} —á.", callback_data=f"edit_{bot_id}_stars_daily_cooldown"))
    markup.add(types.InlineKeyboardButton(f"ü§ù –ë–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {bot_info['stars_ref_bonus_referrer']}‚≠ê", callback_data=f"edit_{bot_id}_stars_ref_bonus_referrer"),
               types.InlineKeyboardButton(f"üë§ –ë–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É: {bot_info['stars_ref_bonus_new_user']}‚≠ê", callback_data=f"edit_{bot_id}_stars_ref_bonus_new_user"))
    markup.add(types.InlineKeyboardButton(f"üéÅ –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ä—Ç: {bot_info['stars_welcome_bonus']}‚≠ê", callback_data=f"edit_{bot_id}_stars_welcome_bonus"))
    markup.add(types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç", callback_data=f"edit_{bot_id}_stars_payments_channel"),
               types.InlineKeyboardButton("üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data=f"edit_{bot_id}_stars_support_chat"))
    markup.add(types.InlineKeyboardButton("üë• –ê–¥–º–∏–Ω—ã", callback_data=f"admins_{bot_id}_manage"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞", callback_data=f"actions_{bot_id}"))
    return markup

def create_clicker_bot_config_menu(bot_id):
    bot_info = get_bot_by_id(bot_id)
    if not bot_info:
        return None
    markup = types.InlineKeyboardMarkup(row_width=2)
    if bot_info['status'] == 'running':
        markup.add(types.InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"control_{bot_id}_stop"),
                   types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"control_{bot_id}_restart"))
    else:
        markup.add(types.InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"control_{bot_id}_start"))

    markup.add(types.InlineKeyboardButton("üîë –¢–æ–∫–µ–Ω", callback_data=f"edit_{bot_id}_bot_token"),
               types.InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data=f"edit_{bot_id}_welcome_message"))

    markup.add(types.InlineKeyboardButton(f"–ö–ª–∏–∫: {(bot_info['click_reward_min'] or 0.001)}-{(bot_info['click_reward_max'] or 0.005)}‚ÇΩ", callback_data=f"edit_{bot_id}_click_reward_min"))

    markup.add(types.InlineKeyboardButton(f"–†–µ–≥–µ–Ω: {(bot_info['energy_regen_rate'] or 2)}/—Å–µ–∫", callback_data=f"edit_{bot_id}_energy_regen_rate"),
               types.InlineKeyboardButton(f"–ú–∏–Ω. –≤—ã–≤–æ–¥: {(bot_info['withdrawal_min_clicker'] or 10.0)}‚ÇΩ", callback_data=f"edit_{bot_id}_withdrawal_min_clicker"))

    markup.add(types.InlineKeyboardButton(f"–ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ä—Ç: {(bot_info['welcome_bonus_clicker'] or 1.0)}‚ÇΩ", callback_data=f"edit_{bot_id}_welcome_bonus_clicker"),
               types.InlineKeyboardButton(f"–ï–∂–µ–¥–Ω. –±–æ–Ω—É—Å: {(bot_info['daily_bonus_clicker'] or 0.5)}‚ÇΩ", callback_data=f"edit_{bot_id}_daily_bonus_clicker"))

    markup.add(types.InlineKeyboardButton(f"–ö–î –ø–æ–¥–∞—Ä–∫–∞: {(bot_info['daily_bonus_cooldown_clicker'] or 12)} —á.", callback_data=f"edit_{bot_id}_daily_bonus_cooldown_clicker"),
               types.InlineKeyboardButton("üèß –°–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞", callback_data=f"edit_{bot_id}_withdrawal_method_text_clicker"))

    markup.add(types.InlineKeyboardButton(f"–ë–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {(bot_info['ref_bonus_referrer_clicker'] or 0.2)}‚ÇΩ", callback_data=f"edit_{bot_id}_ref_bonus_referrer_clicker"),
               types.InlineKeyboardButton(f"–ë–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É: {(bot_info['ref_bonus_new_user_clicker'] or 0.1)}‚ÇΩ", callback_data=f"edit_{bot_id}_ref_bonus_new_user_clicker"))

    markup.add(types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç", callback_data=f"edit_{bot_id}_payments_channel_clicker"),
               types.InlineKeyboardButton("üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data=f"edit_{bot_id}_support_chat_clicker"))

    markup.add(types.InlineKeyboardButton("üë• –ê–¥–º–∏–Ω—ã", callback_data=f"admins_{bot_id}_manage"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞", callback_data=f"actions_{bot_id}"))
    return markup

def create_dop_zarabotok_menu(bot_id):
    bot_info = get_bot_by_id(bot_id)
    is_enabled = False
    text = ""
    
    if bot_info['bot_type'] == 'ref':
        is_enabled = bot_info['flyer_op_enabled']
        op_reward = get_setting('op_reward') or "1.0"
        text = (f"üí∞ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫*\n\n"
                f"–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–û–ü) –∫ –≤–∞—à–µ–º—É –±–æ—Ç—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ *{op_reward} ‚ÇΩ* –∑–∞ –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ, –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –µ—ë –ø—Ä–æ–π–¥–µ—Ç!\n\n"
                f"–≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–π –æ—Ç –≤–∞—Å –Ω–∏–∫–∞–∫–∏—Ö —É—Å–∏–ª–∏–π. üí∏")
    elif bot_info['bot_type'] in ['stars', 'clicker']:
        is_enabled = bot_info['stars_op_enabled'] if bot_info['bot_type'] == 'stars' else bot_info['clicker_op_enabled']
        sub_reward = get_setting('stars_sub_reward') or "1.0"
        text = (f"üí∞ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫*\n\n"
                f"1. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ *{sub_reward} ‚ÇΩ* –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à–µ–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –≤–∞—à–µ–º –±–æ—Ç–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º Flyer).\n\n"
                f"2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –û–ü –æ—Ç Flyer, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞.")
    else:
        return "–≠—Ç–æ—Ç —Ç–∏–ø –±–æ—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–ø. –∑–∞—Ä–∞–±–æ—Ç–æ–∫.", types.InlineKeyboardMarkup()

    status_icon = "üü¢" if is_enabled else "üî¥"
    status_text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if is_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
    text += f"\n\n–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Flyer: {status_icon} *{status_text}*"
            
    markup = types.InlineKeyboardMarkup()
    if not is_enabled:
        markup.add(types.InlineKeyboardButton("üöÄ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Flyer", callback_data=f"flyer_op_apply_{bot_id}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"actions_{bot_id}"))
    return text, markup

def create_cancel_markup():
    return types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞")

def cleanup_stale_states():
    while True:
        try:
            now = time.time()
            stale_users = [user_id for user_id, state in list(user_states.items())
                           if now - state.get('timestamp', now) > TTL_STATES_SECONDS]
            
            if stale_users:
                for user_id in stale_users:
                    if user_id in user_states:
                        del user_states[user_id]
                logging.info(f"–û—á–∏—â–µ–Ω–æ {len(stale_users)} –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ cleanup_stale_states: {e}")
        
        time.sleep(600)

def set_user_state(user_id, state_data):
    state_data['timestamp'] = time.time()
    user_states[user_id] = state_data

# =================================================================================
# -------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ò –ö–û–õ–ë–ï–ö–û–í ---------------------------
# =================================================================================

def process_state_input(message):
    user_id = message.from_user.id
    if user_id not in user_states:
        return

    state = user_states[user_id]
    action = state.get('action')
    if not action:
        return
    
    if hasattr(message, 'text') and message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        try: bot.delete_message(user_id, state['message_id'])
        except: pass
        if user_id in user_states: del user_states[user_id]
        bot.send_message(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=create_main_menu(user_id))
        try: bot.delete_message(user_id, message.message_id)
        except: pass
        return

    if action == 'admin_my_op_add_title':
        title = message.text.strip()
        bot.delete_message(user_id, state['message_id'])
        bot.delete_message(user_id, message.message_id)
        msg = bot.send_message(user_id, "<b>–®–∞–≥ 2/3:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Å—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/durov):", 
                               parse_mode="HTML", reply_markup=create_cancel_markup())
        set_user_state(user_id, {'action': 'admin_my_op_add_link', 'title': title, 'message_id': msg.message_id})
        return

    # --- Bot broadcast: single bot ID input ---
    if action == 'admin_broadcast_bot_single_id':
        # Parse integer robustly and avoid conflating other exceptions with input errors
        text_input = (getattr(message, 'text', '') or '').strip()
        match = re.search(r"-?\d+", text_input)
        if not match:
            bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –±–æ—Ç–∞.")
            return
        try:
            bot_id = int(match.group(0))
        except Exception:
            bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –±–æ—Ç–∞.")
            return

        bot_info = get_bot_by_id(bot_id)
        if not bot_info:
            try:
                bot.edit_message_text("‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:", message.chat.id, state['message_id'], reply_markup=create_cancel_markup())
            except Exception:
                bot.send_message(message.from_user.id, "‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
            return

        # Precheck: warn if bot is not active (single-bot mode only)
        try:
            status = bot_info.get('status') if isinstance(bot_info, dict) else bot_info['status']
        except Exception:
            status = None
        if status != 'running':
            try:
                bot.edit_message_text(
                    "‚ùå –≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π.",
                    message.chat.id,
                    state['message_id'],
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast_bots_menu")
                    )
                )
            except Exception:
                try:
                    bot.send_message(
                        message.from_user.id,
                        "‚ùå –≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π.",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast_bots_menu")
                        )
                    )
                except Exception:
                    pass
            if message.from_user.id in user_states:
                del user_states[message.from_user.id]
            return

        # Cleanup last input message (best-effort)
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception:
            pass

        # Prompt next step; if edit fails, send a fresh message and use its id
        prompt_message_id = None
        try:
            prompt = bot.edit_message_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≠–¢–û–ú –±–æ—Ç–µ (—Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞):",
                message.chat.id,
                state['message_id'],
                reply_markup=create_cancel_markup()
            )
            prompt_message_id = prompt.message_id
        except Exception:
            prompt = bot.send_message(
                message.chat.id,
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≠–¢–û–ú –±–æ—Ç–µ (—Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞):",
                reply_markup=create_cancel_markup()
            )
            prompt_message_id = prompt.message_id

        set_user_state(message.from_user.id, {
            'action': 'admin_broadcast_content_for_bot',
            'message_id': prompt_message_id,
            'target_bot_ids': [bot_id]
        })
        return

    # --- Bot broadcast: multi count input ---
    if action == 'admin_broadcast_bot_multi_count':
        # Parse integer robustly; treat non-positive as "all running"
        text_input = (getattr(message, 'text', '') or '').strip()
        match = re.search(r"-?\d+", text_input)
        if not match:
            bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª-–≤–æ –±–æ—Ç–æ–≤).")
            return
        try:
            count = int(match.group(0))
        except Exception:
            bot.send_message(message.from_user.id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª-–≤–æ –±–æ—Ç–æ–≤).")
            return

        try:
            if count <= 0:
                # select all running bots
                bots = db_execute("SELECT id FROM bots WHERE status='running' ORDER BY id DESC", fetchall=True) or []
            else:
                bots = db_execute("SELECT id FROM bots WHERE status='running' ORDER BY id DESC LIMIT ?", (count,), fetchall=True) or []
        except Exception:
            bots = []

        target_ids = [b['id'] for b in bots]
        if not target_ids:
            try:
                bot.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", message.chat.id, state['message_id'])
            except Exception:
                bot.send_message(message.from_user.id, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            if message.from_user.id in user_states:
                del user_states[message.from_user.id]
            return

        # Cleanup last input message (best-effort)
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception:
            pass

        # Prompt next step; if edit fails, send a fresh message and use its id
        prompt_message_id = None
        try:
            prompt = bot.edit_message_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –±–æ—Ç–∞–º (–æ—á–µ—Ä–µ–¥—å—é):",
                message.chat.id,
                state['message_id'],
                reply_markup=create_cancel_markup()
            )
            prompt_message_id = prompt.message_id
        except Exception:
            prompt = bot.send_message(
                message.chat.id,
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –±–æ—Ç–∞–º (–æ—á–µ—Ä–µ–¥—å—é):",
                reply_markup=create_cancel_markup()
            )
            prompt_message_id = prompt.message_id

        set_user_state(message.from_user.id, {
            'action': 'admin_broadcast_content_for_bot',
            'message_id': prompt_message_id,
            'target_bot_ids': target_ids
        })
        return

    # --- Bot broadcast: get content ---
    if action == 'admin_broadcast_content_for_bot':
        target_bot_ids = state.get('target_bot_ids') or []
        if not target_bot_ids:
            if message.from_user.id in user_states: del user_states[message.from_user.id]
            bot.send_message(message.from_user.id, "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –±–æ—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        # build preview (copy the submitted content into admin chat)
        try:
            preview = bot.copy_message(ADMIN_ID, message.chat.id, message.message_id)
            preview_markup = preview.reply_markup
            preview_id = preview.message_id
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except Exception:
                pass
        except Exception:
            preview_markup = None
            preview_id = message.message_id
        try:
            bot.edit_message_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π:", ADMIN_ID, state['message_id'])
        except Exception:
            pass
        # Ask for optional inline button (text | URL) before confirming
        try:
            prompt = bot.send_message(
                ADMIN_ID,
                "<b>–®–∞–≥ 2/2:</b> –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–¢–µ–∫—Å—Ç | URL</code> –∏–ª–∏ <code>-</code> –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
                parse_mode="HTML",
                reply_markup=create_cancel_markup()
            )
            prompt_message_id = prompt.message_id
        except Exception:
            prompt_message_id = state.get('message_id')
        set_user_state(message.from_user.id, {
            'action': 'admin_broadcast_bots_get_button',
            'message_id': prompt_message_id,
            'target_bot_ids': target_bot_ids,
            'preview_message_id': preview_id,
            'reply_markup': preview_markup
        })
        return

    if action == 'admin_broadcast_bots_get_button':
        # Parse optional inline button and finalize preview + confirmation
        target_bot_ids = state.get('target_bot_ids') or []
        preview_id = state.get('preview_message_id')
        button_markup = state.get('reply_markup')  # preserve existing markup if any

        raw_text = (getattr(message, 'text', '') or '').strip()
        if raw_text and raw_text != '-':
            try:
                parts = [p.strip() for p in raw_text.split('|', 1)]
                if len(parts) != 2 or not parts[0] or not parts[1]:
                    raise ValueError("Invalid format")
                btn_text, btn_url = parts[0], parts[1]
                tmp_markup = types.InlineKeyboardMarkup()
                tmp_markup.add(types.InlineKeyboardButton(text=btn_text, url=btn_url))
                button_markup = tmp_markup
            except Exception:
                # Inform admin and abort this broadcast flow
                try:
                    bot.send_message(message.from_user.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=create_main_menu(message.from_user.id))
                except Exception:
                    pass
                if message.from_user.id in user_states:
                    del user_states[message.from_user.id]
                return

        # Try to apply the selected markup to the preview message
        try:
            bot.edit_message_reply_markup(ADMIN_ID, preview_id, reply_markup=button_markup)
        except Exception:
            pass

        # Show final confirmation
        confirm = types.InlineKeyboardMarkup(row_width=1)
        confirm.add(types.InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–æ—Ç–∞—Ö", callback_data=f"admin_broadcast_bots_confirm"))
        confirm.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back"))
        try:
            bot.send_message(ADMIN_ID, f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–æ—Ç—ã: {', '.join(map(str, target_bot_ids))}", reply_markup=confirm)
        except Exception:
            pass
        set_user_state(message.from_user.id, {
            'action': 'admin_broadcast_ready_for_bots',
            'message_id': state.get('message_id'),
            'target_bot_ids': target_bot_ids,
            'preview_message_id': preview_id,
            'reply_markup': button_markup
        })
        # Clean up prompt and input message if possible
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception:
            pass
        try:
            if state.get('message_id'):
                bot.delete_message(message.chat.id, state['message_id'])
        except Exception:
            pass
        return

    if action == 'admin_broadcast_ready_for_bots':
        # shouldn't get here by message; handled via callback confirm
        return

    if action == 'admin_set_crypto_pay_token':
        try:
            new_token = message.text.strip()
            # Persist to settings and update globals
            set_setting('crypto_pay_token', new_token)
            global CRYPTO_PAY_TOKEN, crypto_pay
            CRYPTO_PAY_TOKEN = new_token
            try:
                crypto_pay = AioCryptoPay(token=CRYPTO_PAY_TOKEN, network=Networks.MAIN_NET)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Crypto Pay: {e}")
                crypto_pay = None

            # Ensure background payment checker is running (start/restart)
            try:
                threading.Thread(target=run_payment_checker, daemon=True).start()
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

            # Inform admin whether token works
            if is_crypto_token_configured() and get_crypto_client() is not None:
                try:
                    bot.answer_callback_query(state.get('call_id', ''), "‚úÖ Crypto Pay —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
                except Exception:
                    pass
            else:
                try:
                    bot.answer_callback_query(state.get('call_id', ''), "‚ö†Ô∏è –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.", show_alert=True)
                except Exception:
                    pass

            # Cleanup state and confirm
            try: bot.delete_message(message.from_user.id, message.message_id)
            except Exception: pass
            try: bot.delete_message(message.from_user.id, state['message_id'])
            except Exception: pass
            if message.from_user.id in user_states: del user_states[message.from_user.id]
            bot.send_message(message.from_user.id, "‚úÖ –¢–æ–∫–µ–Ω Crypto Pay —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=create_main_menu(message.from_user.id))
        except Exception as e:
            bot.send_message(message.from_user.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω: {e}")
        return

    if action == 'admin_set_chat_link':
        link = message.text.strip()
        set_setting('admin_chat_link', link)
        global ADMIN_CHAT_LINK
        ADMIN_CHAT_LINK = link
        try: bot.delete_message(message.from_user.id, state['message_id'])
        except Exception: pass
        try: bot.delete_message(message.from_user.id, message.message_id)
        except Exception: pass
        if message.from_user.id in user_states: del user_states[message.from_user.id]
        bot.send_message(message.from_user.id, "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=create_main_menu(message.from_user.id))
        return

    if action == 'admin_set_channel_link':
        link = message.text.strip()
        set_setting('channel_link', link)
        global CHANNEL_LINK
        CHANNEL_LINK = link
        try: bot.delete_message(message.from_user.id, state['message_id'])
        except Exception: pass
        try: bot.delete_message(message.from_user.id, message.message_id)
        except Exception: pass
        if message.from_user.id in user_states: del user_states[message.from_user.id]
        bot.send_message(message.from_user.id, "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=create_main_menu(message.from_user.id))
        return

    if action == 'admin_my_op_add_link':
        link = message.text.strip()
        title = state['title']
        bot.delete_message(user_id, state['message_id'])
        bot.delete_message(user_id, message.message_id)
        msg = bot.send_message(user_id, "<b>–®–∞–≥ 3/3:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –∑–∞ –æ–¥–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5):",
                               parse_mode="HTML", reply_markup=create_cancel_markup())
        set_user_state(user_id, {'action': 'admin_my_op_add_reward', 'title': title, 'link': link, 'message_id': msg.message_id})
        return

    if action == 'admin_my_op_add_reward':
        try:
            reward = float(message.text.strip().replace(',', '.'))
            if reward < 0: raise ValueError
            
            title = state['title']
            link = state['link']

            db_execute("INSERT INTO admin_tasks (title, resource_link, reward) VALUES (?, ?, ?)",
                       (title, link, reward), commit=True)
            
            bot.delete_message(user_id, state['message_id'])
            bot.delete_message(user_id, message.message_id)
            if user_id in user_states: del user_states[user_id]
            
            bot.send_message(user_id, "‚úÖ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –û–ü —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=create_main_menu(user_id))
            
            call_imitation = types.CallbackQuery(id='fake_call', from_user=message.from_user, data="admin_my_op_menu", chat_instance="private", json_string="")
            
            fake_message = types.Message(message_id=state['message_id'], from_user=None, date=None, chat=message.chat, content_type='text', options={}, json_string="")
            call_imitation.message = fake_message
            
            handle_admin_callbacks(call_imitation)

        except ValueError:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    if action == 'admin_my_op_edit_reward':
        try:
            new_reward = float(message.text.strip().replace(',', '.'))
            if new_reward < 0: raise ValueError
            task_id = state['task_id']
            db_execute("UPDATE admin_tasks SET reward = ? WHERE id = ?", (new_reward, task_id), commit=True)
            
            bot.delete_message(user_id, state['message_id'])
            bot.delete_message(user_id, message.message_id)
            if user_id in user_states: del user_states[user_id]

            bot.answer_callback_query(state['call_id'], "‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            call_imitation = types.CallbackQuery(id=state['call_id'], from_user=message.from_user, data=f"admin_my_op_manage_{task_id}", chat_instance="private", json_string="")
            call_imitation.message = state['message'] 
            handle_admin_callbacks(call_imitation)
        except ValueError:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    if action == 'awaiting_restart_filter_count':
        try:
            filter_count = int(message.text.strip())
        except ValueError:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100) –∏–ª–∏ `-` –¥–ª—è –≤—Å–µ—Ö.")
            return

        bot.delete_message(user_id, state['message_id'])
        bot.delete_message(user_id, message.message_id)
        if user_id in user_states: del user_states[user_id]
        
        confirmation_text = f"–≤—Å–µ—Ö –±–æ—Ç–æ–≤" if filter_count <= 0 else f"–±–æ—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö {filter_count} –∏–ª–∏ –±–æ–ª–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        markup = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"admin_restart_filter_confirm_{filter_count}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
        )
        bot.send_message(user_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å {confirmation_text}?", reply_markup=markup)
        return

    if action == 'awaiting_start_filter_count':
        try:
            filter_count = int(message.text.strip())
        except ValueError:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100) –∏–ª–∏ `-` –¥–ª—è –≤—Å–µ—Ö.")
            return

        bot.delete_message(user_id, state['message_id'])
        bot.delete_message(user_id, message.message_id)
        if user_id in user_states: del user_states[user_id]

        confirmation_text = f"–≤—Å–µ –ù–ï–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã" if filter_count <= 0 else f"–ù–ï–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö {filter_count}+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        markup = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"admin_start_filter_confirm_{filter_count}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
        )
        bot.send_message(user_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å {confirmation_text}?", reply_markup=markup)
        return

    if action == 'awaiting_balance_user_id':
        try:
            target_user_id = int(message.text.strip())
            target_user = get_user(target_user_id)
            if not target_user:
                bot.send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.")
                return
            
            bot.delete_message(user_id, state['message_id'])
            bot.delete_message(user_id, message.message_id)

            msg = bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{target_user_id}</code> (@{target_user['username'] or 'N/A'}):",
                                   parse_mode="HTML", reply_markup=create_cancel_markup())
            set_user_state(user_id, {'action': 'awaiting_balance_amount', 'target_user_id': target_user_id, 'message_id': msg.message_id})
        except ValueError:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π User ID.")
        return

    # HOLD TRANSFER: step 1 -> got user id, show balances and ask for amounts
    if action == 'awaiting_hold_transfer_user_id':
        try:
            target_user_id = int(message.text.strip())
            target_user = get_user(target_user_id)
            if not target_user:
                bot.send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.")
                return

            bot.delete_message(user_id, state['message_id'])
            bot.delete_message(user_id, message.message_id)

            balance = float(target_user['balance'] or 0.0)
            frozen = float(target_user['frozen_balance'] or 0.0)
            info = (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{target_user_id}</code> (@{target_user['username'] or 'N/A'})\n"
                f"üí∏ –ë–∞–ª–∞–Ω—Å: <b>{balance:.2f} ‚ÇΩ</b>\n"
                f"‚è≥ –ù–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏: <b>{frozen:.2f} ‚ÇΩ</b>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–•|Y</code> (–ø—Ä–∏–º–µ—Ä: <code>70|50</code>)\n"
                f"‚Äî <b>–•</b>: —Å–ø–∏—Å–∞—Ç—å —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è\n‚Äî <b>Y</b>: –∑–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å"
            )
            msg = bot.send_message(user_id, info, parse_mode="HTML", reply_markup=create_cancel_markup())
            set_user_state(user_id, {
                'action': 'awaiting_hold_transfer_amounts',
                'target_user_id': target_user_id,
                'message_id': msg.message_id
            })
        except ValueError:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π User ID.")
        return

    # HOLD TRANSFER: step 2 -> parse X|Y and do atomic update
    if action == 'awaiting_hold_transfer_amounts':
        raw = (getattr(message, 'text', '') or '').strip()
        try:
            if '|' not in raw:
                raise ValueError
            left, right = [x.strip() for x in raw.split('|', 1)]
            amount_from_frozen = float(left.replace(',', '.'))
            amount_to_balance = float(right.replace(',', '.'))
            if amount_from_frozen < 0 or amount_to_balance < 0:
                raise ValueError
        except ValueError:
            bot.send_message(user_id, "‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: <code>70|50</code>", parse_mode="HTML")
            return

        target_user_id = state['target_user_id']
        # Validate available frozen
        target = get_user(target_user_id)
        frozen_now = float(target['frozen_balance'] or 0.0)
        if amount_from_frozen > frozen_now:
            bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏. –°–µ–π—á–∞—Å: {frozen_now:.2f} ‚ÇΩ")
            return

        # Apply update
        try:
            db_execute(
                "UPDATE users SET frozen_balance = frozen_balance - ?, balance = balance + ? WHERE user_id = ?",
                (amount_from_frozen, amount_to_balance, target_user_id),
                commit=True
            )
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
            return

        # Cleanup and notify
        try: bot.delete_message(user_id, state['message_id'])
        except: pass
        try: bot.delete_message(user_id, message.message_id)
        except: pass
        if user_id in user_states: del user_states[user_id]

        bot.send_message(
            user_id,
            (
                f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è <code>{target_user_id}</code>.\n"
                f"‚è≥ ‚àí{amount_from_frozen:.2f} ‚ÇΩ —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è, üí∏ +{amount_to_balance:.2f} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å."
            ),
            parse_mode="HTML",
            reply_markup=create_main_menu(user_id)
        )
        try:
            bot.send_message(
                target_user_id,
                (
                    f"üîÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–∏–ª –ø–µ—Ä–µ–≤–æ–¥: ‚è≥ ‚àí{amount_from_frozen:.2f} ‚ÇΩ —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è, "
                    f"üí∏ +{amount_to_balance:.2f} ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å."
                )
            )
        except Exception:
            pass
        return

    if action == 'awaiting_balance_amount':
        try:
            amount = float(message.text.strip().replace(',', '.'))
            if amount <= 0:
                raise ValueError("Amount must be positive")
            target_user_id = state['target_user_id']
            
            db_execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, target_user_id), commit=True)

            bot.delete_message(user_id, state['message_id'])
            bot.delete_message(user_id, message.message_id)
            if user_id in user_states: del user_states[user_id]

            bot.send_message(user_id, f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{target_user_id}</code> —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <code>{amount:.2f}</code> ‚ÇΩ.", parse_mode="HTML", reply_markup=create_main_menu(user_id))
            try:
                bot.send_message(target_user_id, f"üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ <b>{amount:.2f} ‚ÇΩ</b>!", parse_mode="HTML")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
        except ValueError:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.5).")
        return

    if action == 'awaiting_bot_id_for_logs':
        try:
            bot_id_to_get_logs = int(message.text)
            log_path = f"logs/bot_{bot_id_to_get_logs}.log"
            
            with open(log_path, "rb") as log_file:
                bot.send_document(user_id, log_file, caption=f"üìÑ –õ–æ–≥–∏ –¥–ª—è –±–æ—Ç–∞ #{bot_id_to_get_logs}")
            
            bot.delete_message(user_id, state['message_id'])
            bot.delete_message(user_id, message.message_id)
            if user_id in user_states: del user_states[user_id]
            bot.send_message(user_id, "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=create_admin_menu())

        except (ValueError, TypeError):
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –±–æ—Ç–∞.")
            bot.delete_message(user_id, message.message_id)
        except FileNotFoundError:
            bot.send_message(user_id, f"‚ùå –õ–æ–≥-—Ñ–∞–π–ª –¥–ª—è –±–æ—Ç–∞ #{message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–Ω—ã–π.")
            bot.delete_message(user_id, message.message_id)
        except Exception as e:
            bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            if user_id in user_states: del user_states[user_id]
        return

    if action == 'admin_grant_vip':
        try:
            bot_id_to_grant = int(message.text)
            bot_info = get_bot_by_id(bot_id_to_grant)
            if not bot_info:
                bot.send_message(user_id, "‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                try: bot.delete_message(user_id, message.message_id)
                except: pass
                return 

            update_bot_setting(bot_id_to_grant, 'vip_status', True)
            
            try: bot.delete_message(user_id, state['message_id'])
            except: pass
            try: bot.delete_message(user_id, message.message_id)
            except: pass
            
            if user_id in user_states: del user_states[user_id]
            
            bot.send_message(user_id, f"‚úÖ VIP-—Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –±–æ—Ç—É #{bot_id_to_grant}.")
            bot.send_message(user_id, "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=create_admin_menu())
            
            try:
                bot.send_message(bot_info['owner_id'], f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞—à–µ–º—É –±–æ—Ç—É #{bot_id_to_grant} VIP-—Å—Ç–∞—Ç—É—Å!")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {bot_info['owner_id']} –æ –≤—ã–¥–∞—á–µ VIP: {e}")

        except (ValueError, TypeError):
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –±–æ—Ç–∞.")
            try: bot.delete_message(user_id, message.message_id)
            except: pass
        return

    if action == 'admin_change_creator_welcome':
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        new_text = message.text
        set_setting('creator_welcome', new_text)
        try: bot.delete_message(user_id, state['message_id'])
        except: pass
        try: bot.delete_message(user_id, message.message_id)
        except: pass
        if user_id in user_states: del user_states[user_id]
        bot.send_message(user_id, "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=create_admin_menu())
        return

    if action == 'editing_setting':
        setting = state['setting']
        bot_id = state['bot_id']
        message_id = state['message_id']
        new_value_raw = message.text.strip()
        
        try: bot.delete_message(user_id, message.message_id)
        except: pass

        if setting == 'flyer_limit':
            try:
                new_limit = int(new_value_raw)
                if not 1 <= new_limit <= 10:
                    raise ValueError("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
                
                bot.delete_message(user_id, state['message_id'])
                if user_id in user_states: del user_states[user_id]

                bot_info = get_bot_by_id(bot_id)
                current_limit = bot_info['flyer_limit']

                bot.send_message(user_id, f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å {current_limit} –Ω–∞ {new_limit} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", reply_markup=create_main_menu(user_id))
                
                owner_info = message.from_user
                text = (f"üö® <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ Flyer!</b>\n\n"
                        f"<b>–ë–æ—Ç:</b> @{bot_info['bot_username']} (ID: <code>{bot_id}</code>)\n"
                        f"<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> <code>{owner_info.id}</code> (@{owner_info.username or 'N/A'})\n\n"
                        f"–°—Ç–∞—Ä—ã–π –ª–∏–º–∏—Ç: <b>{current_limit}</b>\n"
                        f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: <b>{new_limit}</b>")
                
                markup = types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"admin_limit_approve_{bot_id}_{new_limit}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_limit_decline_{bot_id}_{user_id}")
                )
                bot.send_message(ADMIN_ID, text, reply_markup=markup, parse_mode="HTML")

            except (ValueError, TypeError):
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
            return

        if user_id in user_states: del user_states[user_id]
        error_text = None
        bot_info = get_bot_by_id(bot_id)

        if setting == 'click_reward_min':
            try:
                min_val_str, max_val_str = new_value_raw.replace(',', '.').split('|')
                min_val = float(min_val_str)
                max_val = float(max_val_str)
                if min_val < 0 or max_val < 0 or min_val > max_val:
                    raise ValueError
                update_bot_setting(bot_id, 'click_reward_min', min_val)
                update_bot_setting(bot_id, 'click_reward_max', max_val)
                new_value_raw = None 
            except (ValueError, IndexError):
                error_text = "<b>‚ùå –û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ |, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>0.001|0.005</code>"
                new_value_raw = None

        if new_value_raw is None:
            pass
        elif setting == 'bot_token':
            try:
                test_bot = telebot.TeleBot(new_value_raw, threaded=False)
                test_bot_info = test_bot.get_me()
                update_bot_setting(bot_id, 'bot_username', test_bot_info.username)
                update_bot_setting(bot_id, 'bot_token', new_value_raw)
                if bot_info['status'] == 'unconfigured': update_bot_setting(bot_id, 'status', 'stopped')
            except Exception: error_text = "<b>‚ùå –û—à–∏–±–∫–∞!</b> –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
        
        elif setting in ['ref_reward_1', 'ref_reward_2', 'withdrawal_limit', 
                         'stars_welcome_bonus', 'stars_daily_bonus', 'stars_ref_bonus_referrer', 'stars_ref_bonus_new_user',
                         'click_reward_max', 'welcome_bonus_clicker', 'daily_bonus_clicker', 'ref_bonus_referrer_clicker', 'ref_bonus_new_user_clicker', 'withdrawal_min_clicker',]:
            try:
                value = float(new_value_raw.replace(',', '.'))
                if value < 0: raise ValueError
                update_bot_setting(bot_id, setting, value)
            except ValueError: 
                error_text = "<b>‚ùå –û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>1.5</code> –∏–ª–∏ <code>100</code>"
        
        elif setting in ['stars_daily_cooldown', 'energy_max', 'energy_regen_rate', 'daily_bonus_cooldown_clicker',]:
            try:
                value = int(new_value_raw)
                if value < 0: raise ValueError
                update_bot_setting(bot_id, setting, value)
            except ValueError: 
                error_text = "<b>‚ùå –û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
        
        else:
            update_bot_setting(bot_id, setting, new_value_raw)

        bot.delete_message(user_id, message_id)
        bot_info = get_bot_by_id(bot_id)
        name = f"@{bot_info['bot_username']}" if bot_info['bot_username'] else f"–ë–æ—Ç #{bot_id}"
        
        config_menu = None
        if bot_info['bot_type'] == 'ref':
            config_menu = create_ref_bot_config_menu(bot_id)
        elif bot_info['bot_type'] == 'stars':
            config_menu = create_stars_bot_config_menu(bot_id)
        elif bot_info['bot_type'] == 'clicker':
            config_menu = create_clicker_bot_config_menu(bot_id)
        bot.send_message(user_id, f"‚öôÔ∏è –ú–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ {name}", reply_markup=config_menu)
        if error_text: bot.send_message(user_id, error_text, parse_mode="HTML")
        return

    if action == 'admin_broadcast_get_content':
        bot.delete_message(user_id, state['message_id'])
        set_user_state(user_id, {'action': 'admin_broadcast_get_button', 'content_message_id': message.message_id})
        
        msg = bot.send_message(user_id, 
                               "<b>–®–∞–≥ 2/3:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                               "<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://t.me/link</code>\n\n"
                               "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> (–º–∏–Ω—É—Å).",
                               parse_mode="HTML",
                               reply_markup=create_cancel_markup())
        user_states[user_id]['message_id'] = msg.message_id
        return

    if action == 'admin_broadcast_get_button':
        bot.delete_message(user_id, state['message_id'])
        try: bot.delete_message(user_id, message.message_id)
        except: pass
        
        content_msg_id = state['content_message_id']
        button_markup = types.InlineKeyboardMarkup()
        
        if message.text != '-':
            try:
                parts = message.text.split('|', 1)
                if len(parts) != 2: raise ValueError("Invalid format")
                button_text, button_url = parts[0].strip(), parts[1].strip()
                button_markup.add(types.InlineKeyboardButton(text=button_text, url=button_url))
            except Exception:
                bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=create_main_menu(user_id))
                if user_id in user_states: del user_states[user_id]
                return
        else:
            button_markup = None
            
        try:
            bot.send_message(user_id, "<b>–®–∞–≥ 3/3: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</b>\n–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É?", parse_mode="HTML")
            preview_msg = bot.copy_message(user_id, user_id, content_msg_id, reply_markup=button_markup)
            confirm_markup = types.InlineKeyboardMarkup().row(
                types.InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f"admin_broadcast_confirm_{preview_msg.message_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcast_cancel")
            )
            bot.send_message(user_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=confirm_markup)
            if user_id in user_states: del user_states[user_id]
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=create_main_menu(user_id))
            if user_id in user_states: del user_states[user_id]
        return
        
    if action == 'admin_view_bot_by_id':
        try:
            bot_id_to_view = int(message.text)
            bot_info = get_bot_by_id(bot_id_to_view)
            if not bot_info:
                raise ValueError("Bot not found")
            bot.delete_message(user_id, message.message_id)
            if user_id in user_states: del user_states[user_id]
            show_admin_bot_info(user_id, state['message_id'], bot_id_to_view)
        except (ValueError, TypeError):
            bot.delete_message(user_id, message.message_id)
            bot.edit_message_text("<b>‚ùå –û—à–∏–±–∫–∞! –ë–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n\nüîé –í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                                  user_id, state['message_id'], parse_mode="HTML")
        return
        
    if action == 'admin_set_new_op_key_admin':
        bot_id = state['bot_id']
        new_key = message.text.strip()
        bot_info = get_bot_by_id(bot_id)
        if bot_info['bot_type'] == 'ref':
            update_bot_setting(bot_id, 'flyer_api_key', new_key)
            update_bot_setting(bot_id, 'flyer_op_enabled', True if new_key else False)
        elif bot_info['bot_type'] == 'stars':
            update_bot_setting(bot_id, 'stars_flyer_api_key', new_key)
            update_bot_setting(bot_id, 'stars_op_enabled', True if new_key else False)
        

        bot.delete_message(user_id, message.message_id)
        if user_id in user_states: del user_states[user_id]
        
        bot.answer_callback_query(state['call_id'], "‚úÖ –ö–ª—é—á Flyer —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å.", show_alert=True)
        show_admin_bot_info(user_id, state['message_id'], bot_id)
        return
    
    if action == 'admin_reply_text':
        target_user_id = state['target_user_id']
        bot_id = state.get('bot_id')
        try:
            reply_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
            if bot_id:
                reply_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ø–æ–≤–æ–¥—É –∑–∞—è–≤–∫–∏ –Ω–∞ Flyer –¥–ª—è –±–æ—Ç–∞ #{bot_id}:\n\n{message.text}"
            bot.send_message(target_user_id, reply_text)
            bot.answer_callback_query(state['call_id'], "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", show_alert=True)
        except Exception as e:
            bot.answer_callback_query(state['call_id'], f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", show_alert=True)
        if user_id in user_states: del user_states[user_id]
        return
        
    if action == 'admin_set_flyer_key':
        bot_id = state['bot_id']
        target_user_id = state['target_user_id']
        api_key = message.text.strip()
        bot_info = get_bot_by_id(bot_id)

        if bot_info['bot_type'] == 'ref':
            update_bot_setting(bot_id, 'flyer_op_enabled', True)
            update_bot_setting(bot_id, 'flyer_api_key', api_key)
        elif bot_info['bot_type'] == 'stars':
            update_bot_setting(bot_id, 'stars_op_enabled', True)
            update_bot_setting(bot_id, 'stars_flyer_api_key', api_key)
        

        stop_bot_process(bot_id)
        time.sleep(1)
        start_bot_process(bot_id)
        
        bot.send_message(target_user_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Flyer –¥–ª—è –±–æ—Ç–∞ #{bot_id} –±—ã–ª–∞ *–æ–¥–æ–±—Ä–µ–Ω–∞*! –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
        bot.edit_message_text(state['original_text'] + "\n\n<b>–°—Ç–∞—Ç—É—Å: ‚úÖ –û–î–û–ë–†–ï–ù–û –ò –ö–õ–Æ–ß –£–°–¢–ê–ù–û–í–õ–ï–ù</b>", ADMIN_ID, state['message_id'], parse_mode="HTML")
        if user_id in user_states: del user_states[user_id]
        bot.send_message(user_id, "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", reply_markup=create_main_menu(user_id))
        return
        
    if action == 'admin_change_setting':
        setting_key = state['setting_key']
        try:
            text_value = message.text.strip()
            if setting_key == 'MAX_BOTS_PER_USER':
                new_limit = int(float(text_value.replace(',', '.')))
                if new_limit <= 0:
                    raise ValueError
                global MAX_BOTS_PER_USER
                MAX_BOTS_PER_USER = new_limit
                set_setting('MAX_BOTS_PER_USER', str(new_limit))
            else:
                new_value = float(text_value.replace(",", "."))
                if new_value < 0: raise ValueError
                set_setting(setting_key, str(new_value))
            if user_id in user_states: del user_states[user_id]
            
            bot.delete_message(user_id, state['message_id'])
            bot.delete_message(user_id, message.message_id)

            bot.answer_callback_query(state['call_id'], "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            
            callback_to_return = "admin_op_manage"
            if setting_key == 'vip_price':
                callback_to_return = "admin_vip_manage"
            elif setting_key == 'bots_list_min_users':
                callback_to_return = "admin_lists_menu"

            call_imitation = types.CallbackQuery(id=state['call_id'], from_user=message.from_user, data=callback_to_return, chat_instance="private", json_string="")
            
            fake_message = types.Message(message_id=state['message_id'], from_user=None, date=None, chat=message.chat, content_type='text', options={}, json_string="")
            call_imitation.message = fake_message

            handle_admin_callbacks(call_imitation)
        except ValueError:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    if action == 'admin_lists_by_id_input':
        # –í–≤–æ–¥ ID –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–æ–º/—Å–∫—Ä—ã—Ç–∏–µ–º/—Ä—É—á–Ω—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        text_input = (getattr(message, 'text', '') or '').strip()
        match = re.search(r"-?\d+", text_input)
        if not match:
            try:
                bot.edit_message_text(
                    "‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:",
                    user_id,
                    state['message_id'],
                    reply_markup=create_cancel_markup()
                )
            except Exception:
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –±–æ—Ç–∞.")
            return
        try:
            bid = int(match.group(0))
        except Exception:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –±–æ—Ç–∞.")
            return

        bot_info = get_bot_by_id(bid)
        if not bot_info:
            try:
                bot.edit_message_text(
                    "‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:",
                    user_id,
                    state['message_id'],
                    reply_markup=create_cancel_markup()
                )
            except Exception:
                bot.send_message(user_id, "‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
            return

        # –û—á–∏—Å—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID
        try:
            bot.delete_message(user_id, message.message_id)
        except Exception:
            pass

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–µ–∑ –∫–æ–ª–±–µ–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É
        if user_id in user_states:
            del user_states[user_id]

        call_imitation = types.CallbackQuery(
            id=state.get('call_id', 'fake'),
            from_user=message.from_user,
            data=f"admin_list_view_{bid}",
            chat_instance="private",
            json_string=""
        )
        fake_message = types.Message(
            message_id=state['message_id'],
            from_user=None,
            date=None,
            chat=message.chat,
            content_type='text',
            options={},
            json_string=""
        )
        call_imitation.message = fake_message
        handle_admin_callbacks(call_imitation)
        return

    if action == 'admin_lists_add_manual':
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ä—É—á–Ω–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            bid = int(message.text.strip())
            manual = set(json.loads(get_setting('bots_list_manual') or '[]'))
            manual.add(bid)
            set_setting('bots_list_manual', json.dumps(sorted(manual)))
            try: bot.delete_message(user_id, state['message_id'])
            except: pass
            try: bot.delete_message(user_id, message.message_id)
            except: pass
            if user_id in user_states: del user_states[user_id]
            bot.answer_callback_query(state.get('call_id', ''), "–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω", show_alert=False)
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ ID
            call_imitation = types.CallbackQuery(id=state.get('call_id', 'fake'), from_user=message.from_user, data=f'admin_list_view_{bid}', chat_instance="private", json_string="")
            fake_message = types.Message(message_id=state['message_id'], from_user=None, date=None, chat=message.chat, content_type='text', options={}, json_string="")
            call_imitation.message = fake_message
            handle_admin_callbacks(call_imitation)
        except Exception:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –±–æ—Ç–∞.")
        return

    if action == 'creator_withdrawal_details':
        amount = state['amount']
        details = message.text.strip()
        
        db_execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id), commit=True)
        withdrawal_id = db_execute("INSERT INTO creator_withdrawals (user_id, amount, details, created_at) VALUES (?, ?, ?, ?)", 
                                   (user_id, amount, details, datetime.now()), commit=True)
        
        bot.delete_message(user_id, state['message_id'])
        bot.send_message(user_id, "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", reply_markup=create_main_menu(user_id))
        if user_id in user_states: del user_states[user_id]

        user_info = get_user(user_id)
        admin_text = (f"üì¨ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{withdrawal_id}</b>\n\n"
                      f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code> (@{escape(user_info['username'] or 'N/A')})\n"
                      f"üí∞ –°—É–º–º–∞: <code>{amount:.2f} ‚ÇΩ</code>\n"
                      f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{escape(details)}</code>")
        admin_markup = types.InlineKeyboardMarkup(row_width=2).add(
            types.InlineKeyboardButton("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å–ø–∏—Å–∫–µ", callback_data=f"admin_wd_view_{withdrawal_id}")
        )
        bot.send_message(ADMIN_ID, admin_text, parse_mode="HTML", reply_markup=admin_markup)
        return

    if action == 'transfer_bot':
        bot_id = state.get('bot_id')
        message_id = state['message_id']
        new_value_raw = message.text.strip()
        if user_id in user_states: del user_states[user_id]

        try:
            new_owner_id = int(new_value_raw)
            markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–¥–∞—Ç—å", callback_data=f"transfer_{bot_id}_confirm_{new_owner_id}"),
                                                      types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"actions_{bot_id}"))
            bot.edit_message_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID <code>{new_owner_id}</code>? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", user_id, message_id, reply_markup=markup, parse_mode="HTML")
        except ValueError:
            bot.edit_message_text(f"<b>‚ùå –û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞:", user_id, message_id, reply_markup=create_bot_actions_menu(bot_id), parse_mode="HTML")
        return

    if action == 'add_admin':
        bot_id = state.get('bot_id')
        message_id = state['message_id']
        new_value_raw = message.text.strip()
        if user_id in user_states: del user_states[user_id]

        try:
            admin_id = int(new_value_raw)
            bot_info = get_bot_by_id(bot_id)
            admins = json.loads(bot_info['admins'])
            if admin_id not in admins:
                admins.append(admin_id)
                update_bot_setting(bot_id, 'admins', json.dumps(admins))
            text = f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <code>{admin_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω.\n\n–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: <code>{', '.join(map(str, admins))}</code>"
            config_menu = None
            if bot_info['bot_type'] == 'ref':
                config_menu = create_ref_bot_config_menu(bot_id)
            elif bot_info['bot_type'] == 'stars':
                config_menu = create_stars_bot_config_menu(bot_id)
            
            bot.edit_message_text(text, user_id, message_id, reply_markup=config_menu, parse_mode="HTML")
        except ValueError:
            bot.edit_message_text("<b>‚ùå –û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.", user_id, message_id, reply_markup=create_bot_actions_menu(bot_id), parse_mode="HTML")
        return
        
def get_total_earned_by_user(user_id):
    approved_sum = db_execute("SELECT SUM(amount) FROM creator_withdrawals WHERE user_id = ? AND status = 'approved'", (user_id,), fetchone=True)[0]
    return approved_sum or 0.0

def handle_personal_cabinet(message_or_call):
    is_call = isinstance(message_or_call, telebot.types.CallbackQuery)
    user_id = message_or_call.from_user.id
    chat_id = message_or_call.message.chat.id if is_call else message_or_call.chat.id
    message_id = message_or_call.message.message_id if is_call else None
    user_info = get_user(user_id)
    balance = user_info['balance'] if user_info else 0.0
    frozen_balance = user_info['frozen_balance'] if user_info else 0.0
    total_earned = get_total_earned_by_user(user_id)
    text = (f"üí∞ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
            f"–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–∞—à –¥–æ—Ö–æ–¥ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.\n\n"
            f"üí∏ *–í–∞—à –±–∞–ª–∞–Ω—Å:* `{balance:.2f} ‚ÇΩ`\n"
            f"‚è≥ *–ù–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ (24—á):* `{frozen_balance:.2f} ‚ÇΩ`\n"
            f"üìà *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* `{total_earned:.2f} ‚ÇΩ`")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="creator_withdraw_start"))
    markup.add(types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤", callback_data="creator_withdraw_history"))
    if is_call:
        try: bot.edit_message_text(text, chat_id, message_id, parse_mode="Markdown", reply_markup=markup)
        except: pass
    else: bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)

def handle_admin_callbacks(call):
    user_id = call.from_user.id
    if not is_admin(user_id): 
        bot.answer_callback_query(call.id)
        return

    # Guard: disable all '–°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤' admin actions when feature is off
    try:
        bl_enabled_raw = get_setting('bots_list_feature_enabled')
        bl_enabled = str(bl_enabled_raw).strip() in ('1', 'true', 'True') if bl_enabled_raw is not None else True
    except Exception:
        bl_enabled = True
    if not bl_enabled and (call.data.startswith("admin_lists_") or call.data.startswith("admin_list_")):
        try:
            bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤' –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)
        except Exception:
            pass
        return
    
    # Top-level shortcut to edit creator welcome (from main admin menu)
    if call.data == "admin_edit_creator_welcome":
        msg = bot.edit_message_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ (HTML):",
            ADMIN_ID,
            call.message.message_id,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            )
        )
        set_user_state(ADMIN_ID, {
            'action': 'admin_change_creator_welcome',
            'message_id': msg.message_id,
            'call_id': call.id
        })
        return

    # Crypto Pay settings
    if call.data == "admin_crypto_pay_manage":
        current_token = get_setting('crypto_pay_token') or '‚Äî'
        token_mask = '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if current_token and current_token != '‚Äî' else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        text = (
            "üß© <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Crypto Pay</b>\n\n"
            f"–¢–æ–∫–µ–Ω —Å–µ–π—á–∞—Å: <b>{token_mask}</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–ø–ª–∞—Ç."
        )
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("üîë –í—Å—Ç–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="admin_crypto_pay_set_token"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        try:
            bot.edit_message_text(text, user_id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(user_id, text, parse_mode="HTML", reply_markup=markup)
        return

    # Bot broadcast menu
    if call.data == "admin_broadcast_bots_menu":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("üì§ –í –æ–¥–Ω–æ–º –±–æ—Ç–µ", callback_data="admin_broadcast_bot_single"))
        markup.add(types.InlineKeyboardButton("üì§ –í –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—Ç–∞—Ö (–æ—á–µ—Ä–µ–¥—å)", callback_data="admin_broadcast_bot_multi"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        try:
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –±–æ—Ç–∞–º:", user_id, call.message.message_id, reply_markup=markup)
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –±–æ—Ç–∞–º:", reply_markup=markup)
        return

    if call.data in ("admin_broadcast_bot_single", "admin_broadcast_bot_multi"):
        is_multi = call.data.endswith("_multi")
        prompt = "–í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞, –≥–¥–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:" if not is_multi else "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ—á–µ—Ä–µ–¥—å—é):"
        msg = bot.edit_message_text(prompt, user_id, call.message.message_id, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast_bots_menu")))
        action_key = 'admin_broadcast_bot_single_id' if not is_multi else 'admin_broadcast_bot_multi_count'
        set_user_state(user_id, {'action': action_key, 'message_id': msg.message_id})
        return

    if call.data == "admin_crypto_pay_set_token":
        msg = bot.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π <b>Crypto Pay API —Ç–æ–∫–µ–Ω</b> (–∏–∑ @CryptoBot ‚Üí Crypto Pay ‚Üí –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ):",
            user_id,
            call.message.message_id,
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_crypto_pay_manage"))
        )
        set_user_state(user_id, {'action': 'admin_set_crypto_pay_token', 'message_id': msg.message_id, 'call_id': call.id})
        return

    # Admin chat link setting
    if call.data == "admin_set_chat_link":
        msg = bot.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ <b>—á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/your_chat):",
            user_id,
            call.message.message_id,
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        )
        set_user_state(user_id, {'action': 'admin_set_chat_link', 'message_id': msg.message_id, 'call_id': call.id})
        return

    # Channel link setting
    if call.data == "admin_set_channel_link":
        msg = bot.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ <b>–∫–∞–Ω–∞–ª</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/your_channel):",
            user_id,
            call.message.message_id,
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        )
        set_user_state(user_id, {'action': 'admin_set_channel_link', 'message_id': msg.message_id, 'call_id': call.id})
        return

    if call.data.startswith("admin_my_op_"):
        parts = call.data.split('_')
        action = parts[3]
        
        if action == "menu":
            tasks = db_execute("SELECT * FROM admin_tasks ORDER BY id DESC", fetchall=True)
            text = "‚ú® <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ '–ú–æ–∏ –û–ü'</b>\n\n"
            if not tasks:
                text += "–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."
            markup = types.InlineKeyboardMarkup(row_width=1)
            for task in tasks:
                status_icon = "üü¢" if task['is_active'] else "üî¥"
                markup.add(types.InlineKeyboardButton(f"{status_icon} {escape(task['title'])} ({task['reward']} ‚ÇΩ)", callback_data=f"admin_my_op_manage_{task['id']}"))
            
            markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_my_op_add"))
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back"))
            
            try:
                bot.edit_message_text(text, user_id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
            except telebot.apihelper.ApiTelegramException:
                bot.send_message(user_id, text, parse_mode="HTML", reply_markup=markup)
            return

        elif action == "add":
            msg = bot.edit_message_text("<b>–®–∞–≥ 1/3:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (—ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å):",
                                        user_id, call.message.message_id, parse_mode="HTML",
                                        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_my_op_menu")))
            set_user_state(user_id, {'action': 'admin_my_op_add_title', 'message_id': msg.message_id})
            return
        
        task_id = int(parts[4])
        if action == "manage":
            task = db_execute("SELECT * FROM admin_tasks WHERE id = ?", (task_id,), fetchone=True)
            if not task:
                bot.answer_callback_query(call.id, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
                return

            status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if task['is_active'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
            text = (f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ–º:</b> {escape(task['title'])}\n\n"
                    f"<b>–°—Å—ã–ª–∫–∞:</b> {escape(task['resource_link'])}\n"
                    f"<b>–ù–∞–≥—Ä–∞–¥–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É:</b> {task['reward']} ‚ÇΩ\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}")
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            toggle_text = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if task['is_active'] else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
            markup.add(types.InlineKeyboardButton(toggle_text, callback_data=f"admin_my_op_toggle_{task_id}"))
            markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", callback_data=f"admin_my_op_editreward_{task_id}"))
            markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"admin_my_op_delete_{task_id}_confirm"))
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_my_op_menu"))
            bot.edit_message_text(text, user_id, call.message.message_id, parse_mode="HTML", reply_markup=markup)

        elif action == "toggle":
            current_status = db_execute("SELECT is_active FROM admin_tasks WHERE id = ?", (task_id,), fetchone=True)['is_active']
            db_execute("UPDATE admin_tasks SET is_active = ? WHERE id = ?", (not current_status, task_id), commit=True)
            bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!")
            call.data = f"admin_my_op_manage_{task_id}"
            handle_admin_callbacks(call)

        elif action == "editreward":
            task = db_execute("SELECT reward FROM admin_tasks WHERE id = ?", (task_id,), fetchone=True)
            msg = bot.edit_message_text(f"–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {task['reward']} ‚ÇΩ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                                        user_id, call.message.message_id,
                                        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admin_my_op_manage_{task_id}")))
            set_user_state(user_id, {'action': 'admin_my_op_edit_reward', 'task_id': task_id, 'message_id': msg.message_id, 'call_id': call.id, 'message': call.message})
            
        elif action == "delete":
            if parts[5] == 'confirm':
                markup = types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚ùóÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_my_op_delete_{task_id}_final"),
                    types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admin_my_op_manage_{task_id}")
                )
                bot.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", 
                                      user_id, call.message.message_id, reply_markup=markup)
            elif parts[5] == 'final':
                db_execute("DELETE FROM admin_tasks WHERE id = ?", (task_id,), commit=True)
                db_execute("DELETE FROM user_completed_admin_tasks WHERE task_id = ?", (task_id,), commit=True)
                bot.answer_callback_query(call.id, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
                call.data = "admin_my_op_menu"
                handle_admin_callbacks(call)
        return
    
    if call.data.startswith("admin_lists_") or call.data.startswith("admin_list_"):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –±–æ—Ç–æ–≤
        parts = call.data.split('_')
        # admin_lists_menu, admin_lists_set_min, admin_list_byid_start, admin_list_view_*, admin_list_pin_*, admin_list_unpin_*, admin_list_hide_*, admin_list_unhide_*, admin_list_add_manual, admin_list_del_manual_*
        action = parts[2] if call.data.startswith("admin_lists_") else parts[1]
        if call.data == 'admin_lists_menu':
            current_min = get_setting('bots_list_min_users') or '30'
            pinned = json.loads(get_setting('bots_list_pinned') or '[]')
            manual = json.loads(get_setting('bots_list_manual') or '[]')
            hidden = json.loads(get_setting('bots_list_hidden') or '[]')
            summary = (
                f"üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {len(pinned)} | ‚ûï –í—Ä—É—á–Ω—É—é: {len(manual)} | üö´ –°–∫—Ä—ã—Ç–æ: {len(hidden)}"
            )
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("ü§ñ –ë–æ—Ç—ã —Å Flyer –û–ü", callback_data="admin_lists_op"))
            markup.add(types.InlineKeyboardButton(f"‚öôÔ∏è –ü–æ—Ä–æ–≥ –¥–ª—è '–°–ø–∏—Å–∫–æ–≤ –±–æ—Ç–æ–≤' ({current_min})", callback_data="admin_lists_set_min"))
            markup.add(types.InlineKeyboardButton("üîé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ ID", callback_data="admin_list_byid_start"))
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
            bot.edit_message_text(f"üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n{summary}", ADMIN_ID, call.message.message_id, reply_markup=markup)
            return
        if call.data == 'admin_lists_set_min':
            msg = bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ –º–µ–Ω—é 'üìã –°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤' (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
                ADMIN_ID,
                call.message.message_id,
                reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_lists_menu"))
            )
            set_user_state(ADMIN_ID, {'action': 'admin_change_setting', 'setting_key': 'bots_list_min_users', 'message_id': msg.message_id, 'call_id': call.id, 'message': call.message})
            return
        # –£–¥–∞–ª–µ–Ω–æ: –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ ID".
        # –ù–æ–≤—ã–π —Ä–µ–∂–∏–º: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É ID
        if call.data == 'admin_list_byid_start':
            msg = bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–æ–º/—Å–∫—Ä—ã—Ç–∏–µ–º/—Ä—É—á–Ω—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º:",
                ADMIN_ID,
                call.message.message_id,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_lists_menu")
                )
            )
            set_user_state(ADMIN_ID, {
                'action': 'admin_lists_by_id_input',
                'message_id': msg.message_id,
                'call_id': call.id,
                'message': call.message
            })
            return
        # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä/–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ ID –∏–∑ —Ä–µ–∂–∏–º–∞ "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ ID"
        if call.data.startswith("admin_list_view_"):
            parts_local = call.data.split('_')
            # –§–æ—Ä–º–∞—Ç—ã: admin_list_view_{id} | admin_list_view_{toggle}_{id}
            def render_view(bid: int):
                bot_info = get_bot_by_id(bid)
                pinned_set = set(json.loads(get_setting('bots_list_pinned') or '[]'))
                hidden_set = set(json.loads(get_setting('bots_list_hidden') or '[]'))
                manual_set = set(json.loads(get_setting('bots_list_manual') or '[]'))
                name = '–ë–µ–∑ –∏–º–µ–Ω–∏'
                btype = '‚Äî'
                if bot_info:
                    try:
                        name = f"@{bot_info['bot_username']}" if bot_info['bot_username'] else '–ë–µ–∑ –∏–º–µ–Ω–∏'
                        btype = bot_info.get('bot_type', '‚Äî')
                    except Exception:
                        pass
                state_labels = []
                if bid in pinned_set: state_labels.append('üìå')
                if bid in hidden_set: state_labels.append('üö´')
                if bid in manual_set: state_labels.append('‚ûï')
                label = ' '.join(state_labels) or '‚Äî'
                text = (
                    f"<b>üîé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</b>\n\n"
                    f"ID: <code>{bid}</code> | {escape(name)}\n"
                    f"–¢–∏–ø: <code>{escape(btype)}</code>\n"
                    f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: [{label}]\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
                )
                m = types.InlineKeyboardMarkup(row_width=2)
                # Pin toggle
                if bid in pinned_set:
                    m.add(types.InlineKeyboardButton("üìå –û—Ç–∫—Ä–µ–ø–∏—Ç—å", callback_data=f"admin_list_view_unpin_{bid}"))
                else:
                    m.add(types.InlineKeyboardButton("üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å", callback_data=f"admin_list_view_pin_{bid}"))
                # Hide toggle
                if bid in hidden_set:
                    m.add(types.InlineKeyboardButton("üö´ –ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"admin_list_view_unhide_{bid}"))
                else:
                    m.add(types.InlineKeyboardButton("üö´ –°–∫—Ä—ã—Ç—å", callback_data=f"admin_list_view_hide_{bid}"))
                # Manual toggle
                if bid in manual_set:
                    m.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ä—É—á–Ω—ã—Ö", callback_data=f"admin_list_view_del_{bid}"))
                else:
                    m.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä—É—á–Ω—ã–µ", callback_data=f"admin_list_view_add_{bid}"))
                m.add(types.InlineKeyboardButton("‚§¥Ô∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π ID", callback_data="admin_list_byid_start"))
                m.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_lists_menu"))
                try:
                    bot.edit_message_text(text, ADMIN_ID, call.message.message_id, parse_mode="HTML", reply_markup=m)
                except telebot.apihelper.ApiTelegramException:
                    bot.send_message(ADMIN_ID, text, parse_mode="HTML", reply_markup=m)

            try:
                if len(parts_local) == 4 and parts_local[3].isdigit():
                    bid = int(parts_local[3])
                    if not get_bot_by_id(bid):
                        bot.answer_callback_query(call.id, "‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                        return
                    render_view(bid)
                    return
                elif len(parts_local) == 5 and parts_local[4].isdigit():
                    action2 = parts_local[3]
                    bid = int(parts_local[4])
                    if action2 in ("pin", "unpin"):
                        pinned = set(json.loads(get_setting('bots_list_pinned') or '[]'))
                        if action2 == "pin":
                            pinned.add(bid)
                        else:
                            pinned.discard(bid)
                        set_setting('bots_list_pinned', json.dumps(sorted(pinned)))
                        bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ")
                        render_view(bid)
                        return
                    if action2 in ("hide", "unhide"):
                        hidden = set(json.loads(get_setting('bots_list_hidden') or '[]'))
                        if action2 == "hide":
                            hidden.add(bid)
                        else:
                            hidden.discard(bid)
                        set_setting('bots_list_hidden', json.dumps(sorted(hidden)))
                        bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ")
                        render_view(bid)
                        return
                    if action2 in ("add", "del"):
                        manual = set(json.loads(get_setting('bots_list_manual') or '[]'))
                        if action2 == "add":
                            manual.add(bid)
                        else:
                            manual.discard(bid)
                        set_setting('bots_list_manual', json.dumps(sorted(manual)))
                        bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ")
                        render_view(bid)
                        return
                # Fallback
                bot.answer_callback_query(call.id)
                return
            except Exception:
                bot.answer_callback_query(call.id)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if action in ("pin", "unpin", "hide", "unhide", "del", "add"):
            # Normalize for admin_list_*
            if call.data.startswith("admin_list_add_manual_"):
                try:
                    bid = int(call.data.split('_')[-1])
                except Exception:
                    bot.answer_callback_query(call.id)
                    return
                manual = set(json.loads(get_setting('bots_list_manual') or '[]'))
                manual.add(bid)
                set_setting('bots_list_manual', json.dumps(sorted(manual)))
                bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ")
                # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ ID ‚Äî –≤–µ—Ä–Ω–µ–º—Å—è —Ç—É–¥–∞
                try:
                    prev = call.message.reply_markup
                    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    if call.message and getattr(call.message, 'text', '') and '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º' in call.message.text:
                        call.data = f"admin_list_view_{bid}"
                        handle_admin_callbacks(call)
                        return
                except Exception:
                    pass
                call.data = f'admin_list_view_{bid}'; handle_admin_callbacks(call); return
            if call.data.startswith("admin_list_add_manual"):
                msg = bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –î–û–ë–ê–í–ò–¢–¨ –≤ —Å–ø–∏—Å–∫–∏ –≤—Ä—É—á–Ω—É—é:", ADMIN_ID, call.message.message_id,
                                            reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_lists_menu")))
                set_user_state(ADMIN_ID, {'action': 'admin_lists_add_manual', 'message_id': msg.message_id, 'call_id': call.id, 'message': call.message})
                return
            try:
                bid = int(parts[-1])
            except Exception:
                bot.answer_callback_query(call.id)
                return
            if call.data.startswith("admin_list_pin_") or call.data.startswith("admin_list_unpin_"):
                pinned = set(json.loads(get_setting('bots_list_pinned') or '[]'))
                if call.data.startswith("admin_list_pin_"):
                    pinned.add(bid)
                else:
                    pinned.discard(bid)
                set_setting('bots_list_pinned', json.dumps(sorted(pinned)))
                bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ")
                call.data = f'admin_list_view_{bid}'; handle_admin_callbacks(call); return
            if call.data.startswith("admin_list_hide_") or call.data.startswith("admin_list_unhide_"):
                hidden = set(json.loads(get_setting('bots_list_hidden') or '[]'))
                if call.data.startswith("admin_list_hide_"):
                    hidden.add(bid)
                else:
                    hidden.discard(bid)
                set_setting('bots_list_hidden', json.dumps(sorted(hidden)))
                bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ")
                call.data = f'admin_list_view_{bid}'; handle_admin_callbacks(call); return
            if call.data.startswith("admin_list_del_manual_"):
                manual = set(json.loads(get_setting('bots_list_manual') or '[]'))
                manual.discard(bid)
                set_setting('bots_list_manual', json.dumps(sorted(manual)))
                bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–æ –∏–∑ —Ä—É—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
                call.data = f'admin_list_view_{bid}'; handle_admin_callbacks(call); return
        # –ù–µ –Ω–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–µ –Ω–∏–∂–µ

    if call.data.startswith("admin_balance_"):
        bot.answer_callback_query(call.id)
        action = call.data.split('_')[2]
        if action == "add" and call.data.endswith("start"):
            msg = bot.edit_message_text("üí∏ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
                                        user_id, call.message.message_id,
                                        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")))
            set_user_state(user_id, {'action': 'awaiting_balance_user_id', 'message_id': msg.message_id})
        return

    # Start: transfer from hold flow
    if call.data == "admin_hold_transfer_start":
        bot.answer_callback_query(call.id)
        msg = bot.edit_message_text(
            "üîÅ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —É–¥–µ—Ä–∂–∞–Ω–∏—è:",
            user_id,
            call.message.message_id,
            reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        )
        set_user_state(user_id, {'action': 'awaiting_hold_transfer_user_id', 'message_id': msg.message_id})
        return

    if call.data.startswith("admin_restart_filter_"):
        bot.answer_callback_query(call.id)
        action = call.data.split('_')[3]
        if action == "start":
            # Send a new message with a reply keyboard for cancel to ensure cancel works reliably
            msg = bot.send_message(user_id,
                                   "üîÑ <b>–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤</b>\n\n"
                                   "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.\n"
                                   "–ù–∞–ø—Ä–∏–º–µ—Ä, <code>100</code> –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤, —É –∫–æ–≥–æ 100+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> –∏–ª–∏ <code>0</code>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å <b>–≤—Å–µ—Ö</b> –±–æ—Ç–æ–≤.",
                                   parse_mode="HTML",
                                   reply_markup=create_cancel_markup())
            set_user_state(user_id, {'action': 'awaiting_restart_filter_count', 'message_id': msg.message_id})
        elif action == "confirm":
            filter_count = int(call.data.split('_')[4])
            bot.edit_message_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...", user_id, call.message.message_id)
            
            def mass_restart_thread(admin_id, f_count):
                all_bots = db_execute("SELECT id, bot_type, status FROM bots WHERE status = 'running'", fetchall=True)
                restarted_count = 0
                failed_count = 0
                
                bots_to_restart = []
                if f_count <= 0:
                    bots_to_restart = all_bots
                else:
                    for b in all_bots:
                        user_c = get_child_bot_user_count(b['id'], b['bot_type'])
                        if user_c >= f_count:
                            bots_to_restart.append(b)
                
                total_to_restart = len(bots_to_restart)
                if total_to_restart == 0:
                    bot.send_message(admin_id, "‚úÖ –ë–æ—Ç–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return

                for i, bot_info in enumerate(bots_to_restart):
                    try:
                        stop_bot_process(bot_info['id'])
                        time.sleep(0.5)
                        start_bot_process(bot_info['id'])
                        restarted_count += 1
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {bot_info['id']}: {e}")
                        failed_count += 1
                    time.sleep(0.5)
                    if (i + 1) % 10 == 0:
                         try:
                             bot.send_message(admin_id, f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ {i+1}/{total_to_restart} –±–æ—Ç–æ–≤...")
                         except: pass

                bot.send_message(admin_id, f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                                           f"üëç –£—Å–ø–µ—à–Ω–æ: {restarted_count}\n"
                                           f"üëé –° –æ—à–∏–±–∫–∞–º–∏: {failed_count}")

            threading.Thread(target=mass_restart_thread, args=(user_id, filter_count), daemon=True).start()
        return

    # New: Mass start by filter
    if call.data.startswith("admin_start_filter_"):
        bot.answer_callback_query(call.id)
        action = call.data.split('_')[3]
        if action == "start":
            msg = bot.send_message(user_id,
                                   "‚ñ∂Ô∏è <b>–ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤</b>\n\n"
                                   "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞.\n"
                                   "–ù–∞–ø—Ä–∏–º–µ—Ä, <code>100</code> –∑–∞–ø—É—Å—Ç–∏—Ç –≤—Å–µ –ù–ï–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã, —É –∫–æ–≥–æ 100+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> –∏–ª–∏ <code>0</code>, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å <b>–≤—Å–µ</b> –ù–ï–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã.",
                                   parse_mode="HTML",
                                   reply_markup=create_cancel_markup())
            set_user_state(user_id, {'action': 'awaiting_start_filter_count', 'message_id': msg.message_id})
        elif action == "confirm":
            filter_count = int(call.data.split('_')[4])
            bot.edit_message_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...", user_id, call.message.message_id)

            def mass_start_thread(admin_id, f_count):
                all_bots = db_execute("SELECT id, bot_type, status FROM bots WHERE status != 'running'", fetchall=True)
                started_count = 0
                failed_count = 0

                bots_to_start = []
                if f_count <= 0:
                    bots_to_start = all_bots
                else:
                    for b in all_bots:
                        user_c = get_child_bot_user_count(b['id'], b['bot_type'])
                        if user_c >= f_count:
                            bots_to_start.append(b)

                total_to_start = len(bots_to_start)
                if total_to_start == 0:
                    bot.send_message(admin_id, "‚úÖ –ë–æ—Ç–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return

                for i, bot_info in enumerate(bots_to_start):
                    try:
                        success, start_message = start_bot_process(bot_info['id'])
                        if success:
                            started_count += 1
                        else:
                            failed_count += 1
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {bot_info['id']}: {e}")
                        failed_count += 1
                    time.sleep(0.5)
                    if (i + 1) % 10 == 0:
                        try:
                            bot.send_message(admin_id, f"‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–æ {i+1}/{total_to_start} –±–æ—Ç–æ–≤...")
                        except:
                            pass

                bot.send_message(admin_id, f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                                       f"üëç –£—Å–ø–µ—à–Ω–æ: {started_count}\n"
                                       f"üëé –° –æ—à–∏–±–∫–∞–º–∏: {failed_count}")

            threading.Thread(target=mass_start_thread, args=(user_id, filter_count), daemon=True).start()
        return

    if call.data.startswith("admin_limit_"):
        parts = call.data.split('_')
        sub_action = parts[2]
        bot_id = int(parts[3])
        
        if sub_action == "approve":
            new_limit = int(parts[4])
            update_bot_setting(bot_id, 'flyer_limit', new_limit)
            bot_info = get_bot_by_id(bot_id)
            
            stop_bot_process(bot_id)
            time.sleep(1)
            start_bot_process(bot_id)
            
            bot.answer_callback_query(call.id, f"‚úÖ –õ–∏–º–∏—Ç –¥–ª—è –±–æ—Ç–∞ #{bot_id} –∏–∑–º–µ–Ω–µ–Ω –∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", show_alert=True)
            bot.edit_message_text(call.message.html_text + f"\n\n<b>–°—Ç–∞—Ç—É—Å: ‚úÖ –û–î–û–ë–†–ï–ù–û (–ª–∏–º–∏—Ç {new_limit})</b>", ADMIN_ID, call.message.message_id, parse_mode="HTML")
            try:
                bot.send_message(bot_info['owner_id'], f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª —Å–º–µ–Ω—É –ª–∏–º–∏—Ç–∞ Flyer –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ #{bot_id} –Ω–∞ <b>{new_limit}</b>. –ë–æ—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", parse_mode="HTML")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {bot_info['owner_id']} –æ —Å–º–µ–Ω–µ –ª–∏–º–∏—Ç–∞: {e}")
            return

        elif sub_action == "decline":
            target_user_id = int(parts[4])
            bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.", show_alert=True)
            bot.edit_message_text(call.message.html_text + "\n\n<b>–°—Ç–∞—Ç—É—Å: ‚ùå –û–¢–ö–õ–û–ù–ï–ù–û</b>", ADMIN_ID, call.message.message_id, parse_mode="HTML")
            try:
                bot.send_message(target_user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ Flyer –¥–ª—è –±–æ—Ç–∞ #{bot_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            except Exception as e:
                 logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {target_user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: {e}")
            return

    parts = call.data.split('_')
    action = parts[1]
    
    bot.answer_callback_query(call.id)

    if action == "vip":
        sub_action = parts[2]
        if sub_action == "manage":
            if user_id in user_states:
                del user_states[user_id]

            vip_price = get_setting('vip_price') or '120.0'
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton(f"üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É VIP ({vip_price} ‚ÇΩ)", callback_data="admin_vip_set_price"))
            markup.add(types.InlineKeyboardButton("üéÅ –í—ã–¥–∞—Ç—å VIP", callback_data="admin_vip_grant"))
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
            bot.edit_message_text("‚ÇΩ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VIP-—Å—Ç–∞—Ç—É—Å–æ–º:", ADMIN_ID, call.message.message_id, reply_markup=markup)
        
        elif sub_action == "set" and parts[3] == "price":
            msg = bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è VIP-—Å—Ç–∞—Ç—É—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 120.0):", ADMIN_ID, call.message.message_id,
                                        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_vip_manage")))
            set_user_state(ADMIN_ID, {'action': 'admin_change_setting', 'setting_key': 'vip_price', 'message_id': msg.message_id, 'call_id': call.id, 'message': call.message})
        
        elif sub_action == "grant":
            cancel_markup = types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_vip_manage")
            )
            msg = bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å VIP:", 
                ADMIN_ID, 
                call.message.message_id,
                reply_markup=cancel_markup
            )
            set_user_state(ADMIN_ID, {'action': 'admin_grant_vip', 'message_id': msg.message_id, 'call_id': call.id})
        return
    
    # –£–¥–∞–ª–µ–Ω–æ: –∞–¥–º–∏–Ω-–º–µ–Ω—é '–ö—Ä–µ–∞—Ç–æ—Ä'

    if action == "back":
        bot.edit_message_text("üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é", ADMIN_ID, call.message.message_id, reply_markup=create_admin_menu())

    elif action == "get" and parts[2] == "logs" and parts[3] == "start":
        cancel_markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back"))
        msg = bot.edit_message_text(
            "<b>–í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞, –ª–æ–≥–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:</b>", 
            ADMIN_ID, 
            call.message.message_id,
            reply_markup=cancel_markup,
            parse_mode="HTML"
        )
        set_user_state(ADMIN_ID, {'action': 'awaiting_bot_id_for_logs', 'message_id': msg.message_id})

    elif action == "broadcast" and not (len(parts) >= 3 and parts[2] == "bots"):
        sub_action = parts[2]
        if sub_action == "start":
            markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back"))
            msg = bot.edit_message_text("<b>–®–∞–≥ 1/3:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç (—Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ –∏ —Ç.–¥.), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.", ADMIN_ID, call.message.message_id, reply_markup=markup, parse_mode="HTML")
            set_user_state(ADMIN_ID, {'action': 'admin_broadcast_get_content', 'message_id': msg.message_id})
        elif sub_action == "cancel":
            if ADMIN_ID in user_states: del user_states[ADMIN_ID]
            bot.delete_message(ADMIN_ID, call.message.message_id)
            bot.send_message(ADMIN_ID, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=create_main_menu(ADMIN_ID))
        elif sub_action == "confirm":
            message_to_send = bot.send_message(ADMIN_ID, "üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
            try: bot.delete_message(ADMIN_ID, call.message.message_id)
            except: pass
            preview_message_id = int(parts[3])
            def run_broadcast_thread():
                users_to_send = db_execute("SELECT user_id FROM users", fetchall=True)
                success_count, fail_count, total_users = 0, 0, len(users_to_send)
                start_time = time.time()
                try:
                    copied_message = bot.copy_message(ADMIN_ID, ADMIN_ID, preview_message_id)
                    reply_markup_to_send = copied_message.reply_markup
                    bot.delete_message(ADMIN_ID, copied_message.message_id)
                except Exception: reply_markup_to_send = None
                for i, user in enumerate(users_to_send):
                    try:
                        bot.copy_message(user['user_id'], ADMIN_ID, preview_message_id, reply_markup=reply_markup_to_send)
                        success_count += 1
                    except Exception: fail_count += 1
                    time.sleep(0.05) 
                    if (i + 1) % 20 == 0:
                        try: bot.edit_message_text(f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞... –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {i+1}/{total_users}", ADMIN_ID, message_to_send.message_id)
                        except telebot.apihelper.ApiTelegramException: pass
                end_time = time.time()
                final_text = (f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫.\n\n"
                              f"üì¨ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                              f"üëç –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                              f"üëé –û—à–∏–±–æ–∫: {fail_count}")
                final_markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back"))
                bot.edit_message_text(final_text, ADMIN_ID, message_to_send.message_id, reply_markup=final_markup)
            threading.Thread(target=run_broadcast_thread, daemon=True).start()

    elif call.data == "admin_broadcast_bots_confirm":
        global bots_broadcast_running
        if bots_broadcast_running:
            bot.answer_callback_query(call.id, "‚ùå –£–∂–µ –∏–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –±–æ—Ç–∞–º. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=True)
            return
        state = user_states.get(ADMIN_ID, {})
        target_bot_ids = state.get('target_bot_ids') or []
        if not target_bot_ids:
            bot.answer_callback_query(call.id)
            bot.send_message(ADMIN_ID, "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –±–æ—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        # lock and run
        bots_broadcast_running = True
        bot.answer_callback_query(call.id)
        progress_msg = bot.send_message(ADMIN_ID, "üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –±–æ—Ç–∞–º (–æ—á–µ—Ä–µ–¥—å—é)...")
        preview_msg_id = state.get('preview_message_id')
        reply_markup_to_send = state.get('reply_markup')

        def run_bots_broadcast(ids, preview_id, reply_markup):
            global bots_broadcast_running
            total_bots = len(ids)
            ok, fail = 0, 0
            start_ts = time.time()
            for idx, bid in enumerate(ids):
                try:
                    # Each child bot should have its own DB; we broadcast to its users table if exists
                    bot_type_row = db_execute("SELECT bot_type FROM bots WHERE id = ?", (bid,), fetchone=True)
                    if not bot_type_row:
                        fail += 1
                        continue
                    btype = bot_type_row['bot_type']
                    db_file = f"dbs/bot_{bid}_data.db" if btype == 'ref' else f"dbs/bot_{bid}_stars_data.db"
                    if not os.path.exists(db_file):
                        fail += 1
                        continue
                    try:
                        child_conn = sqlite3.connect(db_file)
                        child_conn.row_factory = sqlite3.Row
                        users_rows = child_conn.cursor().execute("SELECT user_id FROM users").fetchall()
                        child_conn.close()
                    except Exception:
                        fail += 1
                        continue
                    sent, skipped = 0, 0
                    for ur in users_rows:
                        try:
                            bot.copy_message(ur['user_id'], ADMIN_ID, preview_id, reply_markup=reply_markup)
                            sent += 1
                        except Exception:
                            skipped += 1
                        time.sleep(0.03)
                    ok += 1
                except Exception:
                    fail += 1
                if (idx + 1) % 1 == 0:
                    try:
                        bot.edit_message_text(f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –±–æ—Ç–∞–º... {idx+1}/{total_bots}", ADMIN_ID, progress_msg.message_id)
                    except Exception:
                        pass
            dur = time.time() - start_ts
            bots_broadcast_running = False
            try:
                bot.edit_message_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –ë–æ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {ok}/{total_bots}. –û—à–∏–±–æ–∫: {fail}. –í—Ä–µ–º—è: {dur:.1f} —Å–µ–∫.", ADMIN_ID, progress_msg.message_id,
                                      reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")))
            except Exception:
                pass

        threading.Thread(target=run_bots_broadcast, args=(target_bot_ids, preview_msg_id, reply_markup_to_send), daemon=True).start()

    elif action == "lists":
        sub_action = parts[2]
        if sub_action == "menu":
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("ü§ñ –ë–æ—Ç—ã —Å Flyer –û–ü", callback_data="admin_lists_op"))
            markup.add(types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞", callback_data="admin_lists_creator"))
            current_min = get_setting('bots_list_min_users') or '30'
            markup.add(types.InlineKeyboardButton(f"‚öôÔ∏è –ü–æ—Ä–æ–≥ –¥–ª—è '–°–ø–∏—Å–∫–æ–≤ –±–æ—Ç–æ–≤' ({current_min})", callback_data="admin_lists_set_min"))
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
            bot.edit_message_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", ADMIN_ID, call.message.message_id, reply_markup=markup)
        elif sub_action == "op":
            bots_list = db_execute("SELECT id, bot_username, owner_id, bot_type FROM bots WHERE flyer_op_enabled = 1 OR stars_op_enabled = 1 OR clicker_op_enabled = 1", fetchall=True)
            text = "<b>ü§ñ –ë–æ—Ç—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º Flyer –û–ü:</b>\n\n" + ('\n'.join([f"- ID: <code>{b['id']}</code> (@{escape(b['bot_username'] or 'N/A')}) | –í–ª–∞–¥–µ–ª–µ—Ü: <code>{b['owner_id']}</code> | üë• {get_child_bot_user_count(b['id'], b['bot_type'])}" for b in bots_list]) or "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫–∞–º", callback_data="admin_lists_menu"))
            bot.edit_message_text(text, ADMIN_ID, call.message.message_id, parse_mode="HTML", reply_markup=markup)
        # –£–¥–∞–ª–µ–Ω –ø–æ–¥—Ä–∞–∑–¥–µ–ª "creator" (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)
        elif sub_action == "set":
            if len(parts) >= 4 and parts[3] in ('min', 'min_users'):
                msg = bot.edit_message_text(
                    "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ –º–µ–Ω—é 'üìã –°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤' (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
                    ADMIN_ID,
                    call.message.message_id,
                    reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_lists_menu"))
                )
                set_user_state(ADMIN_ID, {'action': 'admin_change_setting', 'setting_key': 'bots_list_min_users', 'message_id': msg.message_id, 'call_id': call.id, 'message': call.message})

    elif action == "bots":
        sub_action = parts[2]
        if sub_action == "all":
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤", callback_data="admin_bots_list_0"))
            markup.add(types.InlineKeyboardButton("üîé –ù–∞–π—Ç–∏ –±–æ—Ç–∞ –ø–æ ID", callback_data="admin_bots_find"))
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back"))
            bot.edit_message_text("<b>ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>", call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
        
        elif sub_action == "list":
            page = int(parts[3])
            BOTS_PER_PAGE = 20
            offset = page * BOTS_PER_PAGE
            
            total_bots_count = db_execute("SELECT COUNT(*) FROM bots", fetchone=True)[0]
            all_bots = db_execute("SELECT id, bot_username, status, bot_type FROM bots ORDER BY id DESC LIMIT ? OFFSET ?", (BOTS_PER_PAGE, offset), fetchall=True)
            
            text = f"<b>üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):</b>\n\n"
            if not all_bots:
                text += "–ë–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ."
            else:
                status_icons = {'running': 'üü¢', 'stopped': 'üî¥', 'unconfigured': '‚ö†Ô∏è'}
                for b in all_bots:
                    icon = status_icons.get(b['status'], '‚ùì')
                    user_count = get_child_bot_user_count(b['id'], b['bot_type'])
                    username = escape(b['bot_username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏')
                    text += f"{icon} ID: <code>{b['id']}</code> | @{username} | üë• {user_count}\n"

            markup = types.InlineKeyboardMarkup()
            nav_buttons = []
            if page > 0:
                nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_bots_list_{page - 1}"))
            if (page + 1) * BOTS_PER_PAGE < total_bots_count:
                nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_bots_list_{page + 1}"))
            
            if nav_buttons:
                markup.row(*nav_buttons)
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞–º–∏", callback_data="admin_bots_all"))
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
        
        elif sub_action == "find":
            msg = bot.edit_message_text("<b>üîé –í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>", call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_bots_all")))
            set_user_state(ADMIN_ID, {'action': 'admin_view_bot_by_id', 'message_id': msg.message_id})
            
    elif action == "bot":
        sub_action = parts[2]
        bot_id = int(parts[3])
        if sub_action == "info":
            show_admin_bot_info(call.from_user.id, call.message.message_id, bot_id)
        elif sub_action == "changekey":
            msg = bot.edit_message_text(f"<b>üîß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Flyer API –∫–ª—é—á –¥–ª—è –±–æ—Ç–∞ ID <code>{bot_id}</code>:</b>", call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admin_bot_info_{bot_id}")))
            set_user_state(ADMIN_ID, {'action': 'admin_set_new_op_key_admin', 'bot_id': bot_id, 'message_id': msg.message_id, 'call_id': call.id})
        elif sub_action == "removekey":
            bot_info = get_bot_by_id(bot_id)
            if bot_info['bot_type'] == 'ref':
                update_bot_setting(bot_id, 'flyer_api_key', None); update_bot_setting(bot_id, 'flyer_op_enabled', False)
            elif bot_info['bot_type'] == 'stars':
                update_bot_setting(bot_id, 'stars_flyer_api_key', None); update_bot_setting(bot_id, 'stars_op_enabled', False)
            elif bot_info['bot_type'] == 'clicker':
                update_bot_setting(bot_id, 'clicker_flyer_api_key', None); update_bot_setting(bot_id, 'clicker_op_enabled', False)
            bot.answer_callback_query(call.id, "‚úÖ –ö–ª—é—á Flyer –¥–ª—è –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å.", show_alert=True)
            show_admin_bot_info(call.from_user.id, call.message.message_id, bot_id)
        elif sub_action == "restart":
            bot_id = int(parts[3])
            stop_bot_process(bot_id)
            time.sleep(1)
            success, message = start_bot_process(bot_id)
            if success:
                bot.answer_callback_query(call.id, f"‚úÖ –ë–æ—Ç ID {bot_id} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", show_alert=True)
            else:
                bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ID {bot_id}: {message}", show_alert=True)
            show_admin_bot_info(call.from_user.id, call.message.message_id, bot_id)
        elif sub_action == "delete":
            if parts[4] == "confirm":
                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.add(types.InlineKeyboardButton("‚ùóÔ∏è –î–ê, –£–î–ê–õ–ò–¢–¨ –ë–û–¢–ê", callback_data=f"admin_bot_delete_{bot_id}_final"), types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admin_bot_info_{bot_id}"))
                bot.edit_message_text(f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ ID <code>{bot_id}</code>?</b>\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
            elif parts[4] == "final":
                delete_bot_from_db(bot_id)
                bot.answer_callback_query(call.id, f"‚úÖ –ë–æ—Ç ID {bot_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω!", show_alert=True)
                call.data = "admin_bots_all"; handle_admin_callbacks(call)

    elif action == "op":
        sub_action = parts[2]
        if sub_action == "manage":
            op_reward = get_setting('op_reward') or "1.0"
            stars_reward = get_setting('stars_sub_reward') or "1.0"
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton(f"üí∏ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ Flyer –û–ü (—Ä–µ—Ñ. –±–æ—Ç): {op_reward} ‚ÇΩ", callback_data="admin_op_set_reward"))
            markup.add(types.InlineKeyboardButton(f"‚≠ê –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É (–∑–≤—ë–∑–¥—ã): {stars_reward} ‚ÇΩ", callback_data="admin_op_set_stars_reward"))
            markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–µ–∞—Ç–æ—Ä–∞", callback_data="admin_edit_creator_welcome"))
            markup.add(types.InlineKeyboardButton("üìä –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–æ—Ç–æ–≤", callback_data="admin_set_max_bots"))
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
            bot.edit_message_text("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∏ –¥–æ—Ö–æ–¥–æ–º Flyer:", ADMIN_ID, call.message.message_id, reply_markup=markup)
        elif sub_action == "set":
            setting_type = parts[3]
            setting_key, prompt_text = None, None
            if setting_type == "reward":
                current_reward = get_setting('op_reward') or "1.0"; setting_key = 'op_reward'
                prompt_text = f"–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ Flyer –û–ü: {current_reward} ‚ÇΩ.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            elif setting_type == "stars" and parts[4] == "reward":
                current_reward = get_setting('stars_sub_reward') or "1.0"; setting_key = 'stars_sub_reward'
                prompt_text = f"–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É: {current_reward} ‚ÇΩ.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            if setting_key and prompt_text:
                markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_op_manage"))
                msg = bot.edit_message_text(prompt_text, ADMIN_ID, call.message.message_id, reply_markup=markup)
                set_user_state(ADMIN_ID, {'action': 'admin_change_setting', 'setting_key': setting_key, 'message_id': msg.message_id, 'call_id': call.id, 'message': call.message})
        elif call.data == "admin_edit_creator_welcome":
            msg = bot.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ (HTML):", ADMIN_ID, call.message.message_id,
                                        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_op_manage")))
            set_user_state(ADMIN_ID, {'action': 'admin_change_creator_welcome', 'message_id': msg.message_id, 'call_id': call.id})
            return
        elif call.data == "admin_set_max_bots":
            current_limit = get_setting('MAX_BOTS_PER_USER') or str(MAX_BOTS_PER_USER)
            msg = bot.edit_message_text(f"üìä –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–æ—Ç–æ–≤: {current_limit}.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:", ADMIN_ID, call.message.message_id,
                                        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_op_manage")))
            set_user_state(ADMIN_ID, {'action': 'admin_change_setting', 'setting_key': 'MAX_BOTS_PER_USER', 'message_id': msg.message_id, 'call_id': call.id, 'message': call.message})
            return
        return

    elif action == "wd":
        wd_action = parts[2]
        if wd_action == "list":
            pending_wds = db_execute("SELECT * FROM creator_withdrawals WHERE status = 'pending' ORDER BY id", fetchall=True)
            text = "<b>üì¨ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:</b>\n\n" + ("–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç." if not pending_wds else "")
            markup = types.InlineKeyboardMarkup(row_width=1)
            for wd in pending_wds:
                markup.add(types.InlineKeyboardButton(f"–ó–∞—è–≤–∫–∞ #{wd['id']} - {wd['amount']:.2f} ‚ÇΩ –æ—Ç {wd['user_id']}", callback_data=f"admin_wd_view_{wd['id']}"))
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back"))
            bot.edit_message_text(text, ADMIN_ID, call.message.message_id, parse_mode="HTML", reply_markup=markup)
            return
        wd_id = int(parts[3])
        if wd_action == "view":
            wd_info = db_execute("SELECT * FROM creator_withdrawals WHERE id = ?", (wd_id,), fetchone=True)
            if not wd_info: bot.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ADMIN_ID, call.message.message_id); return
            user_info = get_user(wd_info['user_id'])
            username = escape(user_info['username'] or "N/A")
            text = (f"<b>üì¨ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{wd_id}</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{wd_info['user_id']}</code> (@{username})\n"
                    f"üí∞ –°—É–º–º–∞: <code>{wd_info['amount']:.2f} ‚ÇΩ</code>\n"
                    f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{escape(wd_info['details'])}</code>\n"
                    f"–°—Ç–∞—Ç—É—Å: <code>{wd_info['status']}</code>")
            markup = types.InlineKeyboardMarkup()
            if wd_info['status'] == 'pending':
                markup.row(types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_wd_approve_{wd_id}_{wd_info['user_id']}"), types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_wd_decline_{wd_id}_{wd_info['user_id']}"))
                markup.row(types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_wd_reply_{wd_id}_{wd_info['user_id']}"))
            markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="admin_wd_list"))
            bot.edit_message_text(text, ADMIN_ID, call.message.message_id, parse_mode="HTML", reply_markup=markup)
            return
        target_user_id = int(parts[4])
        wd_info = db_execute("SELECT * FROM creator_withdrawals WHERE id = ?", (wd_id,), fetchone=True)
        if not wd_info or wd_info['status'] != 'pending':
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
            call.data = f"admin_wd_view_{wd_id}"; handle_admin_callbacks(call)
            return
        if wd_action == 'approve':
            db_execute("UPDATE creator_withdrawals SET status = 'approved' WHERE id = ?", (wd_id,), commit=True)
            bot.send_message(target_user_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {wd_info['amount']:.2f} ‚ÇΩ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –≤—ã–ø–ª–∞—á–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        elif wd_action == 'decline':
            db_execute("UPDATE creator_withdrawals SET status = 'declined' WHERE id = ?", (wd_id,), commit=True)
            db_execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (wd_info['amount'], target_user_id), commit=True)
            bot.send_message(target_user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {wd_info['amount']:.2f} ‚ÇΩ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        elif wd_action == 'reply':
            msg = bot.send_message(ADMIN_ID, f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:", reply_markup=create_cancel_markup())
            set_user_state(ADMIN_ID, {'action': 'admin_reply_text', 'target_user_id': target_user_id, 'bot_id': None, 'message_id': msg.message_id, 'call_id': call.id})
            return
        call.data = f"admin_wd_view_{wd_id}"; handle_admin_callbacks(call)

def show_admin_bot_info(user_id, message_id, bot_id):
    bot_info = get_bot_by_id(bot_id)
    if not bot_info:
        try: bot.edit_message_text(f"<b>‚ùå –ë–æ—Ç —Å ID <code>{bot_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", user_id, message_id, parse_mode="HTML")
        except telebot.apihelper.ApiTelegramException: bot.send_message(user_id, f"<b>‚ùå –ë–æ—Ç —Å ID <code>{bot_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
        return
    owner_info = get_user(bot_info['owner_id'])
    owner_username = escape(owner_info['username'] or "N/A") if owner_info else "N/A"
    bot_username = escape(bot_info['bot_username'] or "N/A")
    user_count = get_child_bot_user_count(bot_id, bot_info['bot_type'])
    
    flyer_key = None
    flyer_enabled = False
    if bot_info['bot_type'] == 'ref':
        flyer_key = bot_info['flyer_api_key']
        flyer_enabled = bot_info['flyer_op_enabled']
    elif bot_info['bot_type'] == 'stars':
        flyer_key = bot_info['stars_flyer_api_key']
        flyer_enabled = bot_info['stars_op_enabled']
    elif bot_info['bot_type'] == 'clicker':
        flyer_key = bot_info['clicker_flyer_api_key']
        flyer_enabled = bot_info['clicker_op_enabled']
    

    text = (f"<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ID <code>{bot_id}</code></b>\n\n"
            f"<b>–¢–∏–ø:</b> {'–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π' if bot_info['bot_type'] == 'ref' else '–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –ó–≤—ë–∑–¥' if bot_info['bot_type'] == 'stars' else '–ö–ª–∏–∫–µ—Ä'}\n"
            f"<b>Username:</b> @{bot_username}\n"
            f"<b>–¢–æ–∫–µ–Ω:</b> <code>{escape(bot_info['bot_token'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}</code>\n"
            f"<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> <code>{bot_info['owner_id']}</code> (@{owner_username})\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user_count}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> <code>{bot_info['status']}</code>\n"
            f"<b>Flyer –û–ü:</b> {'üü¢ –í–∫–ª—é—á–µ–Ω' if flyer_enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"<b>Flyer Key:</b> <code>{escape(flyer_key) if flyer_key else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</code>")
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç–∞", callback_data=f"admin_bot_restart_{bot_id}"))
    markup.add(types.InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å/–ó–∞–¥–∞—Ç—å Flyer Key", callback_data=f"admin_bot_changekey_{bot_id}"))
    if flyer_key:
        markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å Flyer Key", callback_data=f"admin_bot_removekey_{bot_id}"))
    markup.add(types.InlineKeyboardButton("‚ùóÔ∏è –£–¥–∞–ª–∏—Ç—å –ë–æ—Ç–∞", callback_data=f"admin_bot_delete_{bot_id}_confirm"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_bots_all"))
    try: bot.edit_message_text(text, user_id, message_id, parse_mode="HTML", reply_markup=markup)
    except telebot.apihelper.ApiTelegramException: pass

def get_bot_flyer_key_for_check(bot_id):
    bot_info = db_execute("SELECT flyer_api_key, stars_flyer_api_key, bot_type FROM bots WHERE id = ?", (bot_id,), fetchone=True)
    if not bot_info:
        return None
    if bot_info['bot_type'] == 'ref':
        return bot_info['flyer_api_key']
    elif bot_info['bot_type'] == 'stars':
        return bot_info['stars_flyer_api_key']
    
    return None

def run_hold_checker():
    if not FLYER_IMPORTED_FOR_CHECKER:
        logging.error("[HOLD_CHECKER] –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ flyerapi –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–æ—Ä–∫–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ–ª–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
        
    logging.info("[HOLD_CHECKER] –í–æ—Ä–∫–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ–ª–¥–∞ –∑–∞–ø—É—â–µ–Ω.")
    
    async def check_task_async(flyer_client, task):
        try:
            status = await flyer_client.check_task(signature=task['task_signature'])
            logging.info(f"[HOLD_CHECKER] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ {task['id']} ({task['task_signature']}). –°—Ç–∞—Ç—É—Å –æ—Ç Flyer: {status}")
            
            if status == 'complete':
                with db_lock:
                    conn.execute("UPDATE users SET balance = balance + ?, frozen_balance = frozen_balance - ? WHERE user_id = ?",
                                 (task['amount'], task['amount'], task['owner_id']))
                    conn.execute("DELETE FROM pending_flyer_rewards WHERE id = ?", (task['id'],))
                    conn.commit()
                logging.info(f"[HOLD_CHECKER] –£—Å–ø–µ—Ö! ID:{task['id']}. –°—Ç–∞—Ç—É—Å 'complete'. {task['amount']} —Ä—É–±. –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {task['owner_id']}.")
            elif status in ('abort', 'incomplete'):
                with db_lock:
                    conn.execute("UPDATE users SET frozen_balance = frozen_balance - ? WHERE user_id = ?", 
                                 (task['amount'], task['owner_id']))
                    conn.execute("DELETE FROM pending_flyer_rewards WHERE id = ?", (task['id'],))
                    conn.commit()
                logging.warning(f"[HOLD_CHECKER] –û—Ç–º–µ–Ω–∞! ID:{task['id']}. –°—Ç–∞—Ç—É—Å '{status}'. –•–æ–ª–¥ {task['amount']} —Ä—É–±. –¥–ª—è {task['owner_id']} –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.")
        
        except FlyerAPIError as e:
            logging.error(f"[HOLD_CHECKER] –û—à–∏–±–∫–∞ API Flyer –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∏ {task['id']}: {e}")
        except Exception as e:
            logging.error(f"[HOLD_CHECKER] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∏ {task['id']}: {e}")

    async def main_check_loop():
        while True:
            try:
                now_iso = datetime.utcnow().isoformat()
                pending_tasks = db_execute("SELECT * FROM pending_flyer_rewards WHERE check_after_timestamp <= ?", (now_iso,), fetchall=True)

                if pending_tasks:
                    logging.info(f"[HOLD_CHECKER] –ù–∞–π–¥–µ–Ω–æ {len(pending_tasks)} –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
                    tasks_by_bot = {}
                    for task in pending_tasks:
                        tasks_by_bot.setdefault(task['bot_id'], []).append(task)

                    for bot_id, tasks in tasks_by_bot.items():
                        api_key = get_bot_flyer_key_for_check(bot_id)
                        if not api_key:
                            logging.warning(f"[HOLD_CHECKER] –ù–µ –Ω–∞–π–¥–µ–Ω Flyer API –∫–ª—é—á –¥–ª—è –±–æ—Ç–∞ {bot_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {len(tasks)} –∑–∞–¥–∞—á.")
                            continue
                        
                        try:
                            flyer_client = Flyer(key=api_key)
                            async_tasks = [check_task_async(flyer_client, task) for task in tasks]
                            await asyncio.gather(*async_tasks)
                            await flyer_client.close()
                        except Exception as e:
                            logging.error(f"[HOLD_CHECKER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—á–∫–∏ –∑–∞–¥–∞—á –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
                
            except Exception as e:
                logging.critical(f"[HOLD_CHECKER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Ü–∏–∫–ª–µ –≤–æ—Ä–∫–µ—Ä–∞: {e}", exc_info=True)
            
            await asyncio.sleep(300)

    asyncio.run_coroutine_threadsafe(main_check_loop(), async_loop)
 # -------------------- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–ê–ú–Ø–¢–ò --------------------


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞–º—è—Ç–∏ {pid: memory_mb}
# –û–Ω –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å "–±—ã–ª–æ" –∏ "—Å—Ç–∞–ª–æ".
previous_memory_usage = {}
memory_lock = threading.Lock() # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ –ø–æ—Ç–æ–∫–∞

def memory_monitor_worker():
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ, –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ.
    –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –æ–Ω–∞ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–º—è—Ç–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ —Ñ–∞–π–ª.
    """
    global previous_memory_usage
    
    while True:
        try:
            # --- –°–±–æ—Ä —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö ---
            main_process = psutil.Process(os.getpid())
            current_processes = [main_process] + main_process.children(recursive=True)
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ –∑–∞–º–µ—Ä–∞: {pid: (mem_mb, delta_mb, bot_id_str)}
            current_usage_data = {}
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–±—â–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –µ–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
            with memory_lock:
                for proc in current_processes:
                    try:
                        mem_mb = proc.memory_info().rss / 1024 / 1024
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Å—á–∏—Ç–∞–µ–º 0
                        prev_mem_mb = previous_memory_usage.get(proc.pid, 0)
                        delta_mb = mem_mb - prev_mem_mb
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –¥–æ—á–µ—Ä–Ω–µ–≥–æ –±–æ—Ç–∞
                        bot_id_str = '???'
                        if proc.pid != main_process.pid:
                            cmd_line = " ".join(proc.cmdline())
                            if '--bot-id' in cmd_line:
                                bot_id_str = cmd_line.split('--bot-id')[-1].strip()

                        current_usage_data[proc.pid] = (mem_mb, delta_mb, bot_id_str)
                    except psutil.NoSuchProcess:
                        # –ü—Ä–æ—Ü–µ—Å—Å –º–æ–≥ —É–º–µ—Ä–µ—Ç—å, –ø–æ–∫–∞ –º—ã –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–ª–∏
                        continue
            
            # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ ---
            report_lines = []
            report_lines.append(f"üß† –û—Ç—á–µ—Ç –ø–æ –ø–∞–º—è—Ç–∏ –æ—Ç {time.strftime('%Y-%m-%d %H:%M:%S')}")
            report_lines.append("=" * 40)
            
            total_current_mem = 0
            total_delta = 0
            
            # –û—Ç—á–µ—Ç –ø–æ –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
            if main_process.pid in current_usage_data:
                mem, delta, _ = current_usage_data[main_process.pid]
                total_current_mem += mem
                total_delta += delta
                sign = '+' if delta >= 0 else ''
                report_lines.append(f"üîµ –ì–ª–∞–≤–Ω—ã–π –±–æ—Ç (PID {main_process.pid}):")
                report_lines.append(f"   - –¢–µ–∫—É—â–µ–µ: {mem:.2f} –ú–ë (–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {sign}{delta:.2f} –ú–ë)")

            # –û—Ç—á–µ—Ç –ø–æ –¥–æ—á–µ—Ä–Ω–∏–º –±–æ—Ç–∞–º
            children_count = len(current_usage_data) - 1
            if children_count > 0:
                report_lines.append(f"\nü§ñ –î–æ—á–µ—Ä–Ω–∏–µ –±–æ—Ç—ã ({children_count} —à—Ç.):")
                for pid, (mem, delta, bot_id) in current_usage_data.items():
                    if pid == main_process.pid: continue
                    total_current_mem += mem
                    total_delta += delta
                    sign = '+' if delta >= 0 else ''
                    report_lines.append(f"   - ID: {bot_id:<5} (PID {pid}): {mem:.2f} –ú–ë ({sign}{delta:.2f} –ú–ë)")

            # --- –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ ---
            total_sign = '+' if total_delta >= 0 else ''
            report_lines.append("=" * 40)
            report_lines.append(f"üìä –ò–¢–û–ì–û:")
            report_lines.append(f"   - –¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {total_current_mem:.2f} –ú–ë")
            report_lines.append(f"   - –°—É–º–º–∞—Ä–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {total_sign}{total_delta:.2f} –ú–ë –∑–∞ 5 –º–∏–Ω.")
            
            # --- –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª ---
            with open('memory_usage_report.txt', 'w', encoding='utf-8') as f:
                f.write('\n'.join(report_lines))
            
            # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ "–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ" —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–º–µ—Ä–∞ ---
            with memory_lock:
                previous_memory_usage = {pid: data[0] for pid, data in current_usage_data.items()}

        except Exception as e:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª
            with open('memory_usage_report.txt', 'w', encoding='utf-8') as f:
                f.write(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–∞–º—è—Ç–∏: {e}")
        
        # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥) –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        time.sleep(300)

def start_memory_monitor():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏."""
    monitor_thread = threading.Thread(target=memory_monitor_worker, daemon=True)
    monitor_thread.start()
    # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–≤–æ–∏—Ö –ª–æ–≥–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, —á—Ç–æ–±—ã —Ç—ã –∑–Ω–∞–ª, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    print("‚úÖ –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω. –§–∞–π–ª 'memory_usage_report.txt' –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")

# -------------------- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–ê–ú–Ø–¢–ò --------------------

if __name__ == '__main__':
    # <-- –≠—Ç–æ—Ç –∫–æ–¥ –∏–º–µ–µ—Ç –æ—Ç—Å—Ç—É–ø –≤ 4 –ø—Ä–æ–±–µ–ª–∞
    init_db()
    # Load persisted Crypto Pay token if present
    try:
            saved_token = None
            try:
                saved_token = get_setting('crypto_pay_token')
            except Exception:
                saved_token = None
            if saved_token:
                CRYPTO_PAY_TOKEN = saved_token
                try:
                    crypto_pay = AioCryptoPay(token=CRYPTO_PAY_TOKEN, network=Networks.MAIN_NET)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Crypto Pay –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
                    crypto_pay = None
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω Crypto Pay: {e}")
    logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π event loop –¥–ª—è asyncio...")
    loop_thread.start()
    start_memory_monitor()
    cleanup_thread = threading.Thread(target=cleanup_stale_states, daemon=True)
    cleanup_thread.start()
    logging.info("–ó–∞–ø—É—â–µ–Ω –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.")

    threading.Thread(target=run_hold_checker, daemon=True).start()

    def run_payment_checker():
        # <-- –≠—Ç–æ—Ç –∫–æ–¥ –∏–º–µ–µ—Ç –æ—Ç—Å—Ç—É–ø –≤ 8 –ø—Ä–æ–±–µ–ª–æ–≤
        async def check_payments_periodically():
            local_crypto = get_crypto_client()
            if not local_crypto:
                logging.warning("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π Crypto Pay –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞: API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                return

            while True:
                try:
                    pending_invoices = db_execute("SELECT invoice_id, bot_id FROM crypto_payments WHERE status = 'pending'", fetchall=True)
                    if pending_invoices:
                        invoice_ids = [str(inv['invoice_id']) for inv in pending_invoices]
                        checked_invoices = await local_crypto.get_invoices(invoice_ids=",".join(invoice_ids))
                        
                        for invoice in checked_invoices:
                            if invoice.status == 'paid':
                                payment_info = db_execute("SELECT bot_id, user_id FROM crypto_payments WHERE invoice_id = ?", (invoice.invoice_id,), fetchone=True)
                                if payment_info:
                                    bot_id_to_update = payment_info['bot_id']
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ VIP –∏–ª–∏ –ö—Ä–µ–∞—Ç–æ—Ä –ø–æ payload
                                    if invoice.payload.startswith('vip_'):
                                        owner_id_vip = get_bot_by_id(bot_id_to_update)['owner_id'] if bot_id_to_update else payment_info['user_id']
                                        update_bot_setting(bot_id_to_update, 'vip_status', True)
                                        db_execute("UPDATE crypto_payments SET status = 'paid' WHERE invoice_id = ?", (invoice.invoice_id,), commit=True)
                                        logging.info(f"VIP —Å—Ç–∞—Ç—É—Å –¥–ª—è –±–æ—Ç–∞ {bot_id_to_update} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–∞ #{invoice.invoice_id}")
                                        try:
                                            bot.send_message(owner_id_vip, f"‚úÖ VIP-—Å—Ç–∞—Ç—É—Å –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ #{bot_id_to_update} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
                                        except Exception as e:
                                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id_vip} –æ VIP: {e}")
                                    elif invoice.payload.startswith('creator_new_'):
                                        # –û–ø–ª–∞—Ç–∞ –ö—Ä–µ–∞—Ç–æ—Ä–∞ –±–µ–∑ bot_id: —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                        owner_id_new = payment_info['user_id']
                                        creator_bot_id = create_bot_in_db(owner_id_new, 'creator')
                                        db_execute("UPDATE crypto_payments SET status = 'paid' WHERE invoice_id = ?", (invoice.invoice_id,), commit=True)
                                        logging.info(f"–ë–æ—Ç –ö—Ä–µ–∞—Ç–æ—Ä {creator_bot_id} —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–∞ #{invoice.invoice_id} (–Ω–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞)")
                                        try:
                                            bot.send_message(owner_id_new, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –ö—Ä–µ–∞—Ç–æ—Ä #{creator_bot_id} —Å–æ–∑–¥–∞–Ω!\n\n–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏ –±–æ—Ç–∞! –í–∞–º –Ω–∞–ø–∏—à–µ—Ç –∞–¥–º–∏–Ω!")
                                        except Exception as e:
                                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {owner_id_new} –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ö—Ä–µ–∞—Ç–æ—Ä–∞: {e}")
                                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ–∫—É–ø–∫–µ
                                        try:
                                            buyer = get_user(owner_id_new)
                                            bot.send_message(ADMIN_ID, f"üõí –ü–æ–∫—É–ø–∫–∞ –ö—Ä–µ–∞—Ç–æ—Ä–∞ (—Ñ–æ–Ω): –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{owner_id_new}</code> (@{escape(buyer['username'] or 'N/A')}) –æ–ø–ª–∞—Ç–∏–ª —Å—á–µ—Ç #{invoice.invoice_id}. –°–æ–∑–¥–∞–Ω –±–æ—Ç #{creator_bot_id}.", parse_mode="HTML")
                                        except Exception as e:
                                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ —Ñ–æ–Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–µ –ö—Ä–µ–∞—Ç–æ—Ä–∞: {e}")
                                    elif invoice.payload.startswith('creator_'):
                                        # –û–ø–ª–∞—Ç–∞ –ö—Ä–µ–∞—Ç–æ—Ä–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –±–æ—Ç—É (–∏–∑ –º–µ–Ω—é –±–æ—Ç–∞)
                                        owner_id_existing = get_bot_by_id(bot_id_to_update)['owner_id']
                                        creator_bot_id = create_bot_in_db(owner_id_existing, 'creator')
                                        db_execute("UPDATE crypto_payments SET status = 'paid' WHERE invoice_id = ?", (invoice.invoice_id,), commit=True)
                                        logging.info(f"–ë–æ—Ç –ö—Ä–µ–∞—Ç–æ—Ä {creator_bot_id} —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–∞ #{invoice.invoice_id}")
                                        try:
                                            bot.send_message(owner_id_existing, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –ö—Ä–µ–∞—Ç–æ—Ä #{creator_bot_id} —Å–æ–∑–¥–∞–Ω!\n\n–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏ –±–æ—Ç–∞! –í–∞–º –Ω–∞–ø–∏—à–µ—Ç –∞–¥–º–∏–Ω!")
                                        except Exception as e:
                                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id_existing} –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ö—Ä–µ–∞—Ç–æ—Ä–∞: {e}")
                                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                                        try:
                                            buyer = get_user(owner_id_existing)
                                            bot.send_message(ADMIN_ID, f"üõí –ü–æ–∫—É–ø–∫–∞ –ö—Ä–µ–∞—Ç–æ—Ä–∞ (—Ñ–æ–Ω): –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{owner_id_existing}</code> (@{escape(buyer['username'] or 'N/A')}) –æ–ø–ª–∞—Ç–∏–ª —Å—á–µ—Ç #{invoice.invoice_id}. –°–æ–∑–¥–∞–Ω –±–æ—Ç #{creator_bot_id}.", parse_mode="HTML")
                                        except Exception as e:
                                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ —Ñ–æ–Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–µ –ö—Ä–µ–∞—Ç–æ—Ä–∞ (existing): {e}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
                
                await asyncio.sleep(120)
        
        asyncio.run_coroutine_threadsafe(check_payments_periodically(), async_loop)

    payment_thread = threading.Thread(target=run_payment_checker, daemon=True)
    payment_thread.start()
    logging.info("–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Crypto Pay –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω–∞.")

    def cleanup_zombie_processes():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
        # <-- –≠—Ç–æ—Ç –∫–æ–¥ –∏–º–µ–µ—Ç –æ—Ç—Å—Ç—É–ø –≤ 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logging.info("üßπ –í–æ—Ä–∫–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –∑–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω.")
        while True:
            # <-- –≠—Ç–æ—Ç –∫–æ–¥ –∏–º–µ–µ—Ç –æ—Ç—Å—Ç—É–ø –≤ 12 –ø—Ä–æ–±–µ–ª–æ–≤
            try:
                running_bots = db_execute(
                    "SELECT id, pid FROM bots WHERE status = 'running' AND pid IS NOT NULL",
                    fetchall=True
                )
                cleaned_count = 0
                for bot_data in running_bots:
                    if not psutil.pid_exists(bot_data['pid']):
                        logging.warning(f"–ù–∞–π–¥–µ–Ω '–∑–æ–º–±–∏' –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –±–æ—Ç–∞ ID: {bot_data['id']} (PID: {bot_data['pid']}). –°–±—Ä–∞—Å—ã–≤–∞—é —Å—Ç–∞—Ç—É—Å.")
                        update_bot_process_info(bot_data['id'], 'stopped', None, None)
                        cleaned_count += 1
                if cleaned_count > 0:
                    logging.info(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {cleaned_count} '–∑–æ–º–±–∏' –∑–∞–ø–∏—Å–µ–π.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ –æ—á–∏—Å—Ç–∫–∏ –∑–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            
            time.sleep(300) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

    zombie_cleaner_thread = threading.Thread(target=cleanup_zombie_processes, daemon=True)
    zombie_cleaner_thread.start()


    @bot.message_handler(commands=['start'])
    def handle_start(message):
        get_user(message.from_user.id, message.from_user.username)
        welcome = get_setting('creator_welcome') or "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        wm_enabled_raw = get_setting('creator_watermark_enabled')
        try:
            wm_enabled = str(wm_enabled_raw).strip() in ('1', 'true', 'True')
        except Exception:
            wm_enabled = True
        if wm_enabled:
            welcome += "\n\n<i>–ö—Ä–µ–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é</i> @MinxoCreate_bot"
        bot.send_message(message.chat.id, welcome, reply_markup=create_main_menu(message.from_user.id), parse_mode="HTML")

    @bot.message_handler(func=lambda message: message.from_user.id in user_states)
    def handle_state_messages(message):
        process_state_input(message)
        
    @bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'animation'])
    def handle_text_buttons(message):
        user_id = message.from_user.id
        if user_id in user_states and message.text != '‚ùå –û—Ç–º–µ–Ω–∞':
            del user_states[user_id]
        
        # Secret trigger to show watermark toggle
        if str(message.text).strip() == '567293' and is_admin(user_id):
            wm_enabled_raw = get_setting('creator_watermark_enabled')
            wm_enabled = str(wm_enabled_raw).strip() in ('1', 'true', 'True')
            bl_enabled_raw = get_setting('bots_list_feature_enabled')
            bl_enabled = str(bl_enabled_raw).strip() in ('1', 'true', 'True') if bl_enabled_raw is not None else True
            wm_toggle_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—å" if wm_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—å"
            wm_status_text = "–°–µ–π—á–∞—Å: ‚ñ∂Ô∏è –≤–∫–ª—é—á–µ–Ω–∞" if wm_enabled else "–°–µ–π—á–∞—Å: ‚è∏Ô∏è –≤—ã–∫–ª—é—á–µ–Ω–∞"
            bl_toggle_text = "üóÇÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å '–°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤'" if bl_enabled else "üóÇÔ∏è –í–∫–ª—é—á–∏—Ç—å '–°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤'"
            bl_status_text = "–°–ø–∏—Å–∫–∏: ‚ñ∂Ô∏è –≤–∫–ª—é—á–µ–Ω—ã" if bl_enabled else "–°–ø–∏—Å–∫–∏: ‚è∏Ô∏è –≤—ã–∫–ª—é—á–µ–Ω—ã"
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton(wm_toggle_text, callback_data="wm_toggle"))
            markup.add(types.InlineKeyboardButton(bl_toggle_text, callback_data="bl_toggle"))
            bot.send_message(
                user_id,
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n‚Ä¢ –ü–æ–¥–ø–∏—Å—å: {wm_status_text}\n‚Ä¢ {bl_status_text}",
                reply_markup=markup,
            )
            return

        # Secret code to unlock '–ö–ª–∏–∫–µ—Ä' bot type for this user
        if str(message.text).strip() == CLICKER_UNLOCK_CODE:
            try:
                db_execute("UPDATE users SET clicker_unlocked = 1 WHERE user_id = ?", (user_id,), commit=True)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ clicker_unlocked –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            bot.send_message(user_id, "‚úÖ –ù–æ–≤—ã–π —Ç–∏–ø –±–æ—Ç–∞ '–ö–ª–∏–∫–µ—Ä' —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!", parse_mode="HTML")
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è üß∞:", parse_mode="HTML", reply_markup=create_bot_type_menu(user_id))
            return

        if message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞":
            count = get_user_bots_count(user_id)
            try:
                limit_setting = int(float(get_setting('MAX_BOTS_PER_USER') or MAX_BOTS_PER_USER))
            except Exception:
                limit_setting = MAX_BOTS_PER_USER
            if count >= limit_setting and not is_admin(user_id):
                bot.send_message(user_id, f"‚ùå *–õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!* –í—ã —Å–æ–∑–¥–∞–ª–∏ {count} –∏–∑ {limit_setting} –±–æ—Ç–æ–≤.", parse_mode="Markdown")
                return
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è üß∞:", parse_mode="HTML", reply_markup=create_bot_type_menu(user_id))
        elif message.text == "üìã –°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤":
            # Check if feature enabled
            try:
                bl_enabled_raw = get_setting('bots_list_feature_enabled')
                bl_enabled = str(bl_enabled_raw).strip() in ('1', 'true', 'True') if bl_enabled_raw is not None else True
            except Exception:
                bl_enabled = True
            if not bl_enabled:
                return
            try:
                min_users = int(float(get_setting('bots_list_min_users') or 30))
            except Exception:
                min_users = 30
            listed = build_public_bots_list(min_users)
            if not listed:
                bot.send_message(user_id, f"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–µ—Ç –±–æ—Ç–æ–≤ —Å ‚â• {min_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
                return
            lines = []
            for bid, uname, btype, cnt, link in listed[:50]:
                type_icon = "üí∏" if btype == 'ref' else ("‚≠ê" if btype == 'stars' else "üñ±")
                username_show = f"@{uname}" if uname != '–ë–µ–∑ –∏–º–µ–Ω–∏' else '–ë–µ–∑ –∏–º–µ–Ω–∏'
                link_show = link if link != '‚Äî' else '‚Äî'
                lines.append(f"{type_icon} ID: <code>{bid}</code> | {username_show} | üë• {cnt} | üîó {link_show}")
            text = "<b>üìã –°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤</b>\n\n" + "\n".join(lines)
            bot.send_message(user_id, text, parse_mode="HTML")
        elif message.text == "ü§ñ –ú–æ–∏ –±–æ—Ç—ã":
            bot.send_message(user_id, "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤:", reply_markup=create_my_bots_menu(user_id))
        elif message.text == "üí∞ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
            handle_personal_cabinet(message)
        elif message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
            total_users = db_execute("SELECT COUNT(*) FROM users", fetchone=True)[0]
            total_bots_created = db_execute("SELECT COUNT(*) FROM bots", fetchone=True)[0]
            running_bots = db_execute("SELECT COUNT(*) FROM bots WHERE status = 'running'", fetchone=True)[0]

            text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</b> ‚ùû\n"
                f" L üóìÔ∏è –ó–∞–ø—É—Å–∫: <b>{PROJECT_START_DATE}</b>\n"
                f" L üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                "ü§ñ <b>–ë–æ—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ</b> ‚ùû\n"
                f" L üî¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: <b>{total_bots_created}</b>\n"
                f" L üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{running_bots}</b>"
            )

            markup = types.InlineKeyboardMarkup(row_width=2)
            owner_button = types.InlineKeyboardButton("–í–ª–∞–¥–µ–ª–µ—Ü üë®‚Äçüíª", url=f"tg://user?id={ADMIN_ID}")
            # Prefer dynamic settings over defaults
            admin_chat_link = get_setting('admin_chat_link') or ADMIN_CHAT_LINK
            channel_link = get_setting('channel_link') or CHANNEL_LINK
            chat_button = types.InlineKeyboardButton("–ß–∞—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ üí¨", url=admin_chat_link) if admin_chat_link else None
            channel_button = types.InlineKeyboardButton("–ö–∞–Ω–∞–ª üì¢", url=channel_link) if channel_link else None
            buttons_to_add = [btn for btn in [owner_button, chat_button, channel_button] if btn is not None]
            if len(buttons_to_add) % 2 != 0 and len(buttons_to_add) > 1:
                markup.add(*buttons_to_add[:-1]); markup.add(buttons_to_add[-1])
            else: markup.add(*buttons_to_add)
            bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=markup)
        elif message.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and is_admin(user_id):
            bot.send_message(user_id, "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=create_admin_menu())

    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_query(call):
        user_id = call.from_user.id
        try:
            # Handle watermark toggle callback (admin only)
            if call.data == 'wm_toggle' and is_admin(user_id):
                wm_enabled_raw = get_setting('creator_watermark_enabled')
                wm_enabled = str(wm_enabled_raw).strip() in ('1', 'true', 'True')
                new_value = '0' if wm_enabled else '1'
                set_setting('creator_watermark_enabled', new_value)
                bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ")
                # Update the message with new status and button text
                wm_enabled = not wm_enabled
                toggle_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—å" if wm_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—å"
                status_text = "–°–µ–π—á–∞—Å: ‚ñ∂Ô∏è –≤–∫–ª—é—á–µ–Ω–∞" if wm_enabled else "–°–µ–π—á–∞—Å: ‚è∏Ô∏è –≤—ã–∫–ª—é—á–µ–Ω–∞"
                markup = types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(toggle_text, callback_data="wm_toggle")
                )
                try:
                    bot.edit_message_reply_markup(user_id, call.message.message_id, reply_markup=markup)
                except Exception:
                    pass
                try:
                    bot.edit_message_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é. {status_text}", user_id, call.message.message_id, reply_markup=markup)
                except Exception:
                    pass
                return

            # Handle bots list feature toggle (admin only)
            if call.data == 'bl_toggle' and is_admin(user_id):
                bl_enabled_raw = get_setting('bots_list_feature_enabled')
                bl_enabled = str(bl_enabled_raw).strip() in ('1', 'true', 'True') if bl_enabled_raw is not None else True
                new_value = '0' if bl_enabled else '1'
                set_setting('bots_list_feature_enabled', new_value)
                bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ")
                # Update message with both toggles' current states
                wm_enabled_raw = get_setting('creator_watermark_enabled')
                wm_enabled = str(wm_enabled_raw).strip() in ('1', 'true', 'True')
                bl_enabled = not bl_enabled
                wm_toggle_text = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—å" if wm_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—å"
                wm_status_text = "–°–µ–π—á–∞—Å: ‚ñ∂Ô∏è –≤–∫–ª—é—á–µ–Ω–∞" if wm_enabled else "–°–µ–π—á–∞—Å: ‚è∏Ô∏è –≤—ã–∫–ª—é—á–µ–Ω–∞"
                bl_toggle_text = "üóÇÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å '–°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤'" if bl_enabled else "üóÇÔ∏è –í–∫–ª—é—á–∏—Ç—å '–°–ø–∏—Å–∫–∏ –±–æ—Ç–æ–≤'"
                bl_status_text = "–°–ø–∏—Å–∫–∏: ‚ñ∂Ô∏è –≤–∫–ª—é—á–µ–Ω—ã" if bl_enabled else "–°–ø–∏—Å–∫–∏: ‚è∏Ô∏è –≤—ã–∫–ª—é—á–µ–Ω—ã"
                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.add(types.InlineKeyboardButton(wm_toggle_text, callback_data="wm_toggle"))
                markup.add(types.InlineKeyboardButton(bl_toggle_text, callback_data="bl_toggle"))
                try:
                    bot.edit_message_reply_markup(user_id, call.message.message_id, reply_markup=markup)
                except Exception:
                    pass
                try:
                    bot.edit_message_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n‚Ä¢ –ü–æ–¥–ø–∏—Å—å: {wm_status_text}\n‚Ä¢ {bl_status_text}", user_id, call.message.message_id, reply_markup=markup)
                except Exception:
                    pass
                return

            if call.data.startswith('admin_'):
                if call.data == 'admin_lists_menu':
                    call.data = 'admin_lists_menu'
                if call.data == 'admin_lists_set_min' or call.data == 'admin_lists_set_min_users':
                    call.data = 'admin_lists_set_min'
                if call.data.startswith('admin_list_'):
                    # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–æ–≤
                    handle_admin_callbacks(call)
                    return
                handle_admin_callbacks(call)
                return

            if call.data.startswith('vip_'):
                parts = call.data.split('_')
                bot_id = int(parts[1])
                action = parts[2]
                
                if action == 'toggle':
                    bot_info = get_bot_by_id(bot_id)
                    if bot_info['vip_status']:
                        bot.answer_callback_query(call.id, "‚úÖ –£ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —É–∂–µ –µ—Å—Ç—å VIP-—Å—Ç–∞—Ç—É—Å.", show_alert=True)
                        return

                    vip_price = float(get_setting('vip_price') or 120.0)
                    text = (f"‚≠ê <b>–ü–æ–∫—É–ø–∫–∞ VIP-—Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{vip_price:.2f} USDT</b>\n\n"
                            f"–ß—Ç–æ –¥–∞–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å?\n"
                            f"- –£–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–•–æ—á—É —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞' –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–∞—Ö.\n"
                            f"- –û—Ç–∫–ª—é—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤...' –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –±–æ—Ç–æ–≤.\n\n"
                            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    if is_crypto_token_configured():
                        markup.add(types.InlineKeyboardButton("üí≥ Crypto Bot", callback_data=f"vip_{bot_id}_crypto_pay"))
                    markup.add(types.InlineKeyboardButton("üë§ –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±", callback_data=f"vip_{bot_id}_other_payment"))
                    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"actions_{bot_id}"))
                    bot.edit_message_text(text, user_id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
                
                elif action == 'crypto':
                    if parts[3] == 'pay':
                        if not is_crypto_token_configured():
                            bot.answer_callback_query(call.id, "‚ùå Crypto Pay —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", show_alert=True)
                            return
                        local_crypto = get_crypto_client()
                        if not local_crypto:
                            bot.answer_callback_query(call.id, "‚ùå Crypto Pay –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å.", show_alert=True)
                            return
                        bot.answer_callback_query(call.id, "‚è≥ –°–æ–∑–¥–∞—é —Å—á–µ—Ç...")
                        vip_price = float(get_setting('vip_price') or 120.0)
                        
                        async def create_invoice_async():
                            try:
                                invoice = await local_crypto.create_invoice(asset='USDT', amount=vip_price, fiat='RUB', payload=f"vip_{bot_id}")
                                if invoice:
                                    db_execute("INSERT INTO crypto_payments (invoice_id, bot_id, user_id, amount, status) VALUES (?, ?, ?, ?, 'pending')",
                                               (invoice.invoice_id, bot_id, user_id, vip_price), commit=True)
                                    markup = types.InlineKeyboardMarkup(row_width=1)
                                    markup.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç", url=invoice.bot_invoice_url))
                                    markup.add(types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"vip_{bot_id}_check_{invoice.invoice_id}"))
                                    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vip_{bot_id}_toggle"))
                                    bot.edit_message_text("‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", user_id, call.message.message_id, reply_markup=markup)
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ CryptoPay: {e}")
                                bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                        
                        run_async_task(create_invoice_async())

                elif action == 'other':
                    admin_info = bot.get_chat(ADMIN_ID)
                    bot.edit_message_text(f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @{admin_info.username}",
                                          user_id, call.message.message_id,
                                          reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vip_{bot_id}_toggle")))

                elif action == 'check':
                    invoice_id_to_check = int(parts[3])
                    bot.answer_callback_query(call.id, "–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
                    
                    async def check_single_invoice():
                        local_crypto = get_crypto_client()
                        if not local_crypto:
                            bot.answer_callback_query(call.id, "‚ùå Crypto Pay –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å.", show_alert=True)
                            return
                        invoices = await local_crypto.get_invoices(invoice_ids=str(invoice_id_to_check))
                        if invoices and invoices[0].status == 'paid':
                            update_bot_setting(bot_id, 'vip_status', True)
                            db_execute("UPDATE crypto_payments SET status = 'paid' WHERE invoice_id = ?", (invoice_id_to_check,), commit=True)
                            bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! VIP-—Å—Ç–∞—Ç—É—Å –¥–ª—è –±–æ—Ç–∞ #{bot_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", user_id, call.message.message_id,
                                                  reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –±–æ—Ç–∞", callback_data=f"actions_{bot_id}")))
                        else:
                            bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –∏–ª–∏ —Å—á–µ—Ç –∏—Å—Ç–µ–∫.", show_alert=True)
                    
                    run_async_task(check_single_invoice())
                return
            
            if call.data.startswith('buy_creator_'):
                parts = call.data.split('_')
                bot_id = int(parts[2])
                creator_price = float(get_setting('creator_price') or 500.0)
                
                text = (f"üé® <b>–ü–æ–∫—É–ø–∫–∞ –±–æ—Ç–∞ –ö—Ä–µ–∞—Ç–æ—Ä</b>\n\n"
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{creator_price:.2f} USDT</b>\n\n"
                        f"–ß—Ç–æ –¥–∞–µ—Ç –±–æ—Ç –ö—Ä–µ–∞—Ç–æ—Ä?\n"
                        f"- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤\n"
                        f"- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
                        f"- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")
                markup = types.InlineKeyboardMarkup(row_width=1)
                if is_crypto_token_configured():
                    markup.add(types.InlineKeyboardButton("üí≥ Crypto Bot", callback_data=f"creator_{bot_id}_crypto_pay"))
                markup.add(types.InlineKeyboardButton("üë§ –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±", callback_data=f"creator_{bot_id}_other_payment"))
                markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"actions_{bot_id}"))
                bot.edit_message_text(text, user_id, call.message.message_id, parse_mode="HTML", reply_markup=markup)
                return
            
            if call.data.startswith('creatornew_'):
                # –û–ø–ª–∞—Ç–∞ –ö—Ä–µ–∞—Ç–æ—Ä–∞ –∏–∑ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ (–±–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ bot_id)
                parts = call.data.split('_')
                action = parts[1]
                if action == 'crypto' and parts[2] == 'pay':
                    if not is_crypto_token_configured():
                        bot.answer_callback_query(call.id, "‚ùå Crypto Pay —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", show_alert=True)
                        return
                    local_crypto = get_crypto_client()
                    if not local_crypto:
                        bot.answer_callback_query(call.id, "‚ùå Crypto Pay –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å.", show_alert=True)
                        return
                    bot.answer_callback_query(call.id, "‚è≥ –°–æ–∑–¥–∞—é —Å—á–µ—Ç...")
                    creator_price = float(get_setting('creator_price') or 500.0)
                    async def create_creatornew_invoice_async():
                        try:
                            payload = f"creator_new_{user_id}"
                            invoice = await local_crypto.create_invoice(asset='USDT', amount=creator_price, fiat='RUB', payload=payload)
                            if invoice:
                                db_execute("INSERT INTO crypto_payments (invoice_id, bot_id, user_id, amount, status) VALUES (?, ?, ?, ?, 'pending')",
                                           (invoice.invoice_id, 0, user_id, creator_price), commit=True)
                                markup = types.InlineKeyboardMarkup(row_width=1)
                                markup.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç", url=invoice.bot_invoice_url))
                                markup.add(types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"creatornew_check_{invoice.invoice_id}"))
                                markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"create_bot_creator"))
                                bot.edit_message_text("‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", user_id, call.message.message_id, reply_markup=markup)
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ CryptoPay –¥–ª—è –ö—Ä–µ–∞—Ç–æ—Ä–∞ (new): {e}")
                            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                    run_async_task(create_creatornew_invoice_async())
                    return
                elif action == 'other' and parts[2] == 'payment':
                    admin_info = bot.get_chat(ADMIN_ID)
                    bot.edit_message_text(f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –±–æ—Ç–∞ –ö—Ä–µ–∞—Ç–æ—Ä –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @{admin_info.username}",
                                          user_id, call.message.message_id,
                                          reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"create_bot_creator")))
                    return
                elif action == 'check':
                    invoice_id_to_check = int(parts[2])
                    bot.answer_callback_query(call.id, "–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
                    async def check_creatornew_invoice():
                        local_crypto = get_crypto_client()
                        if not local_crypto:
                            bot.answer_callback_query(call.id, "‚ùå Crypto Pay –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å.", show_alert=True)
                            return
                        invoices = await local_crypto.get_invoices(invoice_ids=str(invoice_id_to_check))
                        if invoices and invoices[0].status == 'paid':
                            creator_bot_id = create_bot_in_db(user_id, 'creator')
                            db_execute("UPDATE crypto_payments SET status = 'paid' WHERE invoice_id = ?", (invoice_id_to_check,), commit=True)
                            bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –ö—Ä–µ–∞—Ç–æ—Ä #{creator_bot_id} —Å–æ–∑–¥–∞–Ω!\n\n–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏ –±–æ—Ç–∞! –í–∞–º –Ω–∞–ø–∏—à–µ—Ç –∞–¥–º–∏–Ω!", user_id, call.message.message_id,
                                                  reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –±–æ—Ç–æ–≤", callback_data="back_to_bots_list")))
                            try:
                                buyer = get_user(user_id)
                                bot.send_message(ADMIN_ID, f"üõí –ü–æ–∫—É–ø–∫–∞ –ö—Ä–µ–∞—Ç–æ—Ä–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> (@{escape(buyer['username'] or 'N/A')}) –æ–ø–ª–∞—Ç–∏–ª —Å—á–µ—Ç #{invoice_id_to_check}. –°–æ–∑–¥–∞–Ω –±–æ—Ç #{creator_bot_id}.", parse_mode="HTML")
                            except Exception as e:
                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –ø–æ–∫—É–ø–∫–µ –ö—Ä–µ–∞—Ç–æ—Ä–∞: {e}")
                        else:
                            bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –∏–ª–∏ —Å—á–µ—Ç –∏—Å—Ç–µ–∫.", show_alert=True)
                    run_async_task(check_creatornew_invoice())
                    return

            if call.data.startswith('creator_'):
                parts = call.data.split('_')
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–ø–ª–∞—Ç—ã –≤–∏–¥–∞: creator_{botId}_{action}_...
                # –ö–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–º–µ—é—Ç –≤–∏–¥ creator_withdraw_start –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å —Å—é–¥–∞.
                if len(parts) >= 4 and parts[1].isdigit():
                    bot_id = int(parts[1])
                    action = parts[2]
                    
                    if action == 'crypto' and parts[3] == 'pay':
                        if not is_crypto_token_configured():
                            bot.answer_callback_query(call.id, "‚ùå Crypto Pay —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", show_alert=True)
                            return
                        local_crypto = get_crypto_client()
                        if not local_crypto:
                            bot.answer_callback_query(call.id, "‚ùå Crypto Pay –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å.", show_alert=True)
                            return
                        bot.answer_callback_query(call.id, "‚è≥ –°–æ–∑–¥–∞—é —Å—á–µ—Ç...")
                        creator_price = float(get_setting('creator_price') or 500.0)
                        
                        async def create_creator_invoice_async():
                            try:
                                invoice = await local_crypto.create_invoice(asset='USDT', amount=creator_price, fiat='RUB', payload=f"creator_{bot_id}")
                                if invoice:
                                    db_execute("INSERT INTO crypto_payments (invoice_id, bot_id, user_id, amount, status) VALUES (?, ?, ?, ?, 'pending')",
                                               (invoice.invoice_id, bot_id, user_id, creator_price), commit=True)
                                    markup = types.InlineKeyboardMarkup(row_width=1)
                                    markup.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç", url=invoice.bot_invoice_url))
                                    markup.add(types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"creator_{bot_id}_check_{invoice.invoice_id}"))
                                    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"buy_creator_{bot_id}"))
                                    bot.edit_message_text("‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", user_id, call.message.message_id, reply_markup=markup)
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ CryptoPay –¥–ª—è –ö—Ä–µ–∞—Ç–æ—Ä–∞: {e}")
                                bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                        
                        run_async_task(create_creator_invoice_async())
                        return
                    
                    elif action == 'other':
                        admin_info = bot.get_chat(ADMIN_ID)
                        bot.edit_message_text(f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –±–æ—Ç–∞ –ö—Ä–µ–∞—Ç–æ—Ä –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @{admin_info.username}",
                                              user_id, call.message.message_id,
                                              reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"buy_creator_{bot_id}")))
                        return
                    
                    elif action == 'check':
                        invoice_id_to_check = int(parts[3])
                        bot.answer_callback_query(call.id, "–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
                        
                        async def check_creator_invoice():
                            local_crypto = get_crypto_client()
                            if not local_crypto:
                                bot.answer_callback_query(call.id, "‚ùå Crypto Pay –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å.", show_alert=True)
                                return
                            invoices = await local_crypto.get_invoices(invoice_ids=str(invoice_id_to_check))
                            if invoices and invoices[0].status == 'paid':
                                # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –ö—Ä–µ–∞—Ç–æ—Ä
                                creator_bot_id = create_bot_in_db(user_id, 'creator')
                                db_execute("UPDATE crypto_payments SET status = 'paid' WHERE invoice_id = ?", (invoice_id_to_check,), commit=True)
                                bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –ö—Ä–µ–∞—Ç–æ—Ä #{creator_bot_id} —Å–æ–∑–¥–∞–Ω!\n\n–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏ –±–æ—Ç–∞! –í–∞–º –Ω–∞–ø–∏—à–µ—Ç –∞–¥–º–∏–Ω!", user_id, call.message.message_id,
                                                      reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é –±–æ—Ç–æ–≤", callback_data="back_to_bots_list")))
                            else:
                                bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –∏–ª–∏ —Å—á–µ—Ç –∏—Å—Ç–µ–∫.", show_alert=True)
                        
                        run_async_task(check_creator_invoice())
                        return
            
            if call.data == "creator_withdraw_start":
                bot.answer_callback_query(call.id)
                user_info = get_user(user_id)
                balance = user_info['balance']
                if balance < MIN_CREATOR_WITHDRAWAL:
                    bot.send_message(user_id, f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_CREATOR_WITHDRAWAL:.2f} ‚ÇΩ. –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {balance:.2f} ‚ÇΩ.")
                    return
                msg = bot.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\n–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –≤—Å—é —Å—É–º–º—É.\n\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞:", 
                                            chat_id=user_id, message_id=call.message.message_id,
                                            reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="creator_cabinet_show")))
                set_user_state(user_id, {'action': 'creator_withdrawal_details', 'amount': balance, 'message_id': msg.message_id})
                return
            
            if call.data == "creator_cabinet_show":
                bot.answer_callback_query(call.id)
                if user_id in user_states: del user_states[user_id]
                handle_personal_cabinet(call)
                return

            if call.data == "creator_withdraw_history":
                bot.answer_callback_query(call.id)
                withdrawals = db_execute("SELECT * FROM creator_withdrawals WHERE user_id = ? ORDER BY id DESC LIMIT 10", (user_id,), fetchall=True)
                text = "üìú *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:*\n\n"
                if not withdrawals:
                    text += "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
                else:
                    status_map = {'pending': '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏', 'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ', 'declined': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}
                    for wd in withdrawals:
                        try:
                            created_date = datetime.strptime(wd['created_at'], '%Y-%m-%d %H:%M:%S.%f').strftime('%d.%m.%Y')
                        except ValueError:
                            created_date = datetime.strptime(wd['created_at'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                        text += f"ID: `{wd['id']}` | –°—É–º–º–∞: `{wd['amount']:.2f} ‚ÇΩ` | –°—Ç–∞—Ç—É—Å: {status_map.get(wd['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | –î–∞—Ç–∞: {created_date}\n"
                
                markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data="creator_cabinet_show"))
                bot.edit_message_text(text, user_id, call.message.message_id, parse_mode="Markdown", reply_markup=markup)
                return

            if call.data.startswith('dop_zarabotok_'):
                bot_id = int(call.data.split('_')[2])
                text, markup = create_dop_zarabotok_menu(bot_id)
                bot.edit_message_text(text, user_id, call.message.message_id, reply_markup=markup, parse_mode="Markdown")
                bot.answer_callback_query(call.id)
                return
                
            if call.data.startswith('flyer_op_'):
                parts = call.data.split('_')
                action = parts[2]
                bot_id = int(parts[3])
                
                if action == 'apply':
                    bot_info = get_bot_by_id(bot_id)
                    owner = get_user(bot_info['owner_id'])
                    user_count = get_child_bot_user_count(bot_id, bot_info['bot_type'])
                    owner_username = f"@{owner['username']}" if owner['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    bot_username = f"@{bot_info['bot_username']}" if bot_info['bot_username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    admin_text = (f"üö® <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Flyer</b>\n\n"
                                  f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> <code>{owner['user_id']}</code> ({escape(owner_username)})\n"
                                  f"ü§ñ <b>–ë–æ—Ç:</b> {escape(bot_username)} (ID: <code>{bot_id}</code>)\n"
                                  f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:</b> {user_count}\n"
                                  f"üîë <b>–¢–æ–∫–µ–Ω:</b> <code>{escape(bot_info['bot_token'] or '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}</code>\n")
                    markup = types.InlineKeyboardMarkup(row_width=3)
                    markup.add(
                        types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"flyer_op_approve_{bot_id}_{owner['user_id']}"),
                        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"flyer_op_decline_{bot_id}_{owner['user_id']}"),
                        types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"flyer_op_reply_{bot_id}_{owner['user_id']}")
                    )
                    bot.send_message(ADMIN_ID, admin_text, reply_markup=markup, parse_mode="HTML")
                    bot.answer_callback_query(call.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", show_alert=True)
                    bot.edit_message_text("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", user_id, call.message.message_id)

                elif action in ['approve', 'decline', 'reply']:
                    if user_id != ADMIN_ID: return
                    target_user_id = int(parts[4])
                    
                    if action == 'approve':
                        bot.answer_callback_query(call.id)
                        msg = bot.edit_message_text(call.message.html_text + "\n\n<b>–°—Ç–∞—Ç—É—Å: –û–ñ–ò–î–ê–ù–ò–ï –ö–õ–Æ–ß–ê</b>", ADMIN_ID, call.message.message_id, parse_mode="HTML")
                        set_user_state(ADMIN_ID, {
                            'action': 'admin_set_flyer_key', 'bot_id': bot_id, 'target_user_id': target_user_id,
                            'message_id': msg.message_id, 'original_text': call.message.html_text
                        })
                        bot.send_message(ADMIN_ID, f"üîë –í–≤–µ–¥–∏—Ç–µ Flyer API –∫–ª—é—á –¥–ª—è –±–æ—Ç–∞ #{bot_id}:", reply_markup=create_cancel_markup())

                    elif action == 'decline':
                        bot.send_message(target_user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Flyer –¥–ª—è –±–æ—Ç–∞ #{bot_id} –±—ã–ª–∞ *–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*.")
                        bot.edit_message_text(call.message.html_text + "\n\n<b>–°—Ç–∞—Ç—É—Å: ‚ùå –û–¢–ö–õ–û–ù–ï–ù–û</b>", ADMIN_ID, call.message.message_id, parse_mode="HTML")
                        bot.answer_callback_query(call.id)
                    
                    elif action == 'reply':
                        bot.answer_callback_query(call.id)
                        set_user_state(ADMIN_ID, {
                            'action': 'admin_reply_text', 'target_user_id': target_user_id, 'bot_id': bot_id,
                            'message_id': call.message.message_id, 'call_id': call.id
                        })
                        bot.send_message(ADMIN_ID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=create_cancel_markup())
                return

            if call.data == "dummy": bot.answer_callback_query(call.id); return
            if call.data == "back_to_bots_list":
                bot.answer_callback_query(call.id)
                bot.edit_message_text("–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤:", user_id, call.message.message_id, reply_markup=create_my_bots_menu(user_id)); return
            if call.data == "create_bot_ref":
                bot.answer_callback_query(call.id, "–ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è...")
                bot_id = create_bot_in_db(user_id, 'ref')
                bot.edit_message_text(f"üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç #{bot_id} —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤:", user_id, call.message.message_id, reply_markup=create_my_bots_menu(user_id)); return
            if call.data == "create_bot_stars":
                bot.answer_callback_query(call.id, "–ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è...")
                bot_id = create_bot_in_db(user_id, 'stars')
                bot.edit_message_text(f"‚≠ê –ë–æ—Ç '–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –ó–≤—ë–∑–¥' #{bot_id} —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤:", user_id, call.message.message_id, reply_markup=create_my_bots_menu(user_id)); return
            if call.data == "create_bot_clicker":
                bot.answer_callback_query(call.id, "–ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è...")
                bot_id = create_bot_in_db(user_id, 'clicker')
                bot.edit_message_text(f"üñ± –ë–æ—Ç '–ö–ª–∏–∫–µ—Ä' #{bot_id} —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤:", user_id, call.message.message_id, reply_markup=create_my_bots_menu(user_id)); return
            # –£–¥–∞–ª–µ–Ω—ã: create_bot_creator

            data = call.data.split('_')
            action = data[0]
            bot_id = int(data[1])
            
            bot.answer_callback_query(call.id)

            if action == 'actions':
                bot_info = get_bot_by_id(bot_id)
                bot_name = f"@{bot_info['bot_username']}" if bot_info['bot_username'] else f"–ë–æ—Ç #{bot_id}"
                bot_type_name = "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π" if bot_info['bot_type'] == 'ref' else ("–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –ó–≤—ë–∑–¥" if bot_info['bot_type'] == 'stars' else "–ö–ª–∏–∫–µ—Ä")
                if bot_info['status'] == 'running' and bot_info['pid'] and psutil.pid_exists(bot_info['pid']):
                    resources = get_process_resources(bot_info['pid'])
                    start_time_val = bot_info['start_time']
                    uptime = time.time() - start_time_val if start_time_val else 0
                    status_text = "üü¢ –ó–∞–ø—É—â–µ–Ω"
                else:
                    if bot_info['status'] == 'running': update_bot_process_info(bot_id, 'stopped', None, None)
                    resources = {"ram": 0, "cpu": 0}; uptime = 0
                    status_text = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if bot_info['status'] == 'stopped' else "‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                text = (f"ü§ñ <b>–ë–æ—Ç:</b> <code>{escape(bot_name)}</code> (ID: <code>{bot_id}</code>)\n"
                        f"üß¢ <b>–®–∞–±–ª–æ–Ω:</b> {bot_type_name}\n"
                        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {status_text}\n"
                        f"üíæ <b>RAM:</b> {resources['ram']:.2f} –ú–ë\n"
                        f"‚öôÔ∏è <b>CPU:</b> {resources['cpu']:.1f}%\n"
                        f"‚è±Ô∏è <b>–ê–ø—Ç–∞–π–º:</b> {format_uptime(uptime)}")
                bot.edit_message_text(text, user_id, call.message.message_id, reply_markup=create_bot_actions_menu(bot_id), parse_mode="HTML")
            
            elif action == 'config':
                bot_info = get_bot_by_id(bot_id)
                name = f"@{bot_info['bot_username']}" if bot_info['bot_username'] else f"–ë–æ—Ç #{bot_id}"
                config_menu = None
                if bot_info['bot_type'] == 'ref':
                    config_menu = create_ref_bot_config_menu(bot_id)
                elif bot_info['bot_type'] == 'stars':
                    config_menu = create_stars_bot_config_menu(bot_id)
                elif bot_info['bot_type'] == 'clicker':
                    config_menu = create_clicker_bot_config_menu(bot_id)
                bot.edit_message_text(f"‚öôÔ∏è –ú–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ {name}", user_id, call.message.message_id, reply_markup=config_menu)
            
            elif action == 'transfer' and data[2] == 'start':
                msg = bot.edit_message_text("üì≤ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –±–æ—Ç–∞:", user_id, call.message.message_id, 
                                            reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"actions_{bot_id}")))
                set_user_state(user_id, {'action': 'transfer_bot', 'bot_id': bot_id, 'message_id': msg.message_id})
            
            elif action == 'transfer' and data[2] == 'confirm':
                new_owner_id = int(data[3])
                update_bot_setting(bot_id, 'owner_id', new_owner_id)
                bot.edit_message_text(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{new_owner_id}</code>.", user_id, call.message.message_id, reply_markup=create_my_bots_menu(user_id), parse_mode="HTML")

            elif action == 'logs' and data[2] == 'get':
                try:
                    with open(f"logs/bot_{bot_id}.log", "rb") as log_file: bot.send_document(user_id, log_file, caption=f"üìÑ –õ–æ–≥–∏ –¥–ª—è –±–æ—Ç–∞ #{bot_id}")
                except FileNotFoundError: bot.answer_callback_query(call.id, "‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

            elif action == 'delete' and data[2] == 'confirm':
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ —Ü–µ–ª–∏–∫–æ–º
                markup = types.InlineKeyboardMarkup(row_width=2)
                markup.add(types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{bot_id}_final"),
                           types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"actions_{bot_id}"))
                bot.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", user_id, call.message.message_id, reply_markup=markup)
            elif action == 'delete' and data[2] == 'final':
                # –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω
                bot_info = get_bot_by_id(bot_id)
                if not bot_info:
                    bot.answer_callback_query(call.id, "‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                    return
                if user_id != ADMIN_ID and user_id != bot_info['owner_id']:
                    bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –±–æ—Ç–∞.", show_alert=True)
                    return
                delete_bot_from_db(bot_id)
                bot.edit_message_text("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", user_id, call.message.message_id, reply_markup=create_my_bots_menu(user_id))
            
            elif action == 'users' and data[2] == 'export':
                try:
                    bot_info = get_bot_by_id(bot_id)
                    db_filename_map = {
                        'ref': f"dbs/bot_{bot_id}_data.db",
                        'stars': f"dbs/bot_{bot_id}_stars_data.db",
                        'clicker': f"dbs/bot_{bot_id}_clicker_data.db",
                    }
                    db_filename = db_filename_map.get(bot_info['bot_type'])
                    if not db_filename or not os.path.exists(db_filename):
                        bot.answer_callback_query(call.id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
                        return
                    child_conn = sqlite3.connect(f'file:{db_filename}?mode=ro', uri=True)
                    users = child_conn.cursor().execute("SELECT user_id FROM users").fetchall()
                    child_conn.close()
                    if users:
                        user_ids = "\n".join([str(u[0]) for u in users])
                        file_path = f"dbs/export_users_bot_{bot_id}.txt"
                        with open(file_path, "w") as f: f.write(user_ids)
                        with open(file_path, "rb") as f: bot.send_document(user_id, f, caption=f"üìÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ #{bot_id} ({len(users)} —á–µ–ª.)")
                        os.remove(file_path)
                    else: bot.answer_callback_query(call.id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
                except (sqlite3.OperationalError, FileNotFoundError): bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.", show_alert=True)

            elif action == 'admins' and data[2] == 'manage':
                 bot_info = get_bot_by_id(bot_id)
                 admins = json.loads(bot_info['admins'])
                 text = f"–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: <code>{', '.join(map(str, admins)) if admins else '–Ω–µ—Ç'}</code>"
                 markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=f"admins_{bot_id}_add"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"config_{bot_id}"))
                 bot.edit_message_text(text, user_id, call.message.message_id, reply_markup=markup, parse_mode="HTML")

            elif action == 'admins' and data[2] == 'add':
                 msg = bot.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", user_id, call.message.message_id,
                                             reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"admins_{bot_id}_manage")))
                 set_user_state(user_id, {'action': 'add_admin', 'bot_id': bot_id, 'message_id': msg.message_id})
                 
            elif action == 'control':
                command = data[2]
                if command in ['start', 'stop']:
                    success, message = start_bot_process(bot_id) if command == 'start' else stop_bot_process(bot_id)
                    bot.answer_callback_query(call.id, message, show_alert=not success)
                    call.data = f"config_{bot_id}"; handle_callback_query(call)
                elif command == 'restart':
                    stop_success, stop_message = stop_bot_process(bot_id)
                    time.sleep(1) 
                    start_success, start_message = start_bot_process(bot_id)
                    if start_success:
                        bot.answer_callback_query(call.id, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", show_alert=True)
                    else:
                        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {start_message}", show_alert=True)
                    call.data = f"config_{bot_id}"; handle_callback_query(call)
            
            elif action == 'edit':
                setting_name = '_'.join(data[2:])
                bot_info = get_bot_by_id(bot_id)
                current_value = bot_info[setting_name]
                prompts = {
                    'bot_token': "üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:", 'welcome_message': "üëã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (HTML):", 
                    'ref_reward_1': "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ L1:", 'ref_reward_2': "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ L2:", 
                    'withdrawal_limit': "üí≥ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:", 'withdrawal_method_text': "üèß –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞:",
                    'payout_channel': "üì¢ –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–ª–∞—Ç:", 'chat_link': "üîó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", 
                    'regulations_text': "üìú –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ (HTML):", 'flyer_limit': f"üìà –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –û–ü (–æ—Ç 1 –¥–æ 10):",
                    'stars_payments_channel': "üì¢ –í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–ª–∞—Ç:", 'stars_support_chat': "üí¨ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
                    'stars_welcome_bonus': "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å (–∑–≤—ë–∑–¥):",
                    'stars_daily_bonus': "üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ (–∑–≤—ë–∑–¥):",
                    'stars_daily_cooldown': "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ (–≤ —á–∞—Å–∞—Ö):",
                    'stars_ref_bonus_referrer': "ü§ù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ (–∑–≤—ë–∑–¥):",
                    'stars_ref_bonus_new_user': "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–æ–Ω—É—Å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–≤—ë–∑–¥):",
                    'click_reward_min': "‚ÇΩ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –∏ –º–∞–∫—Å. –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–ª–∏–∫ —á–µ—Ä–µ–∑ | (–ü—Ä–∏–º–µ—Ä: 0.001|0.005):",
                    'energy_max': "‚ö°Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏:",
                    'energy_regen_rate': "‚ö°Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ (–≤ —Å–µ–∫):",
                    'welcome_bonus_clicker': "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å (–º–æ–Ω–µ—Ç):",
                    'daily_bonus_clicker': "üéÅ –í–≤–µ–¥–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (–º–æ–Ω–µ—Ç):",
                    'daily_bonus_cooldown_clicker': "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ (–≤ —á–∞—Å–∞—Ö):",
                    'ref_bonus_referrer_clicker': "ü§ù –í–≤–µ–¥–∏—Ç–µ –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ (–º–æ–Ω–µ—Ç):",
                    'ref_bonus_new_user_clicker': "üë§ –í–≤–µ–¥–∏—Ç–µ –±–æ–Ω—É—Å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ (–º–æ–Ω–µ—Ç):",
                    'withdrawal_min_clicker': "üí≥ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–æ–Ω–µ—Ç):",
                    'withdrawal_method_text_clicker': "üèß –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞:",
                    'payments_channel_clicker': "üì¢ –í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–ª–∞—Ç:",
                    'support_chat_clicker': "üí¨ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
                }
                if setting_name in prompts:
                    current_value_str = escape(str(current_value)) if current_value is not None else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                    if setting_name == 'click_reward_min':
                        current_value_str = f"{(bot_info['click_reward_min'] or 0.001)}|{(bot_info['click_reward_max'] or 0.005)}"
                    
                    msg = bot.edit_message_text(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n<code>{current_value_str}</code>\n\n{prompts[setting_name]}", user_id, call.message.message_id,
                                                reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"config_{bot_id}")), parse_mode="HTML")
                    set_user_state(user_id, {'action': 'editing_setting', 'bot_id': bot_id, 'setting': setting_name, 'message_id': msg.message_id})

        except Exception as e:
            logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ callback: {e}", exc_info=True)
    
    logging.info("–ë–æ—Ç-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling(timeout=20, long_polling_timeout=10, skip_pending=True)
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
        time.sleep(15)